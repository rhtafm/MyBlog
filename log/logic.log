2022-06-30 17:30:12.581 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Neither @ContextConfiguration nor @ContextHierarchy found for test class [wiki.jixing.myblog.MyBlogApplicationTests], using SpringBootContextLoader
2022-06-30 17:30:12.592 [main] [INFO ] org.springframework.test.context.support.AbstractContextLoader -- Could not detect default resource locations for test class [wiki.jixing.myblog.MyBlogApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2022-06-30 17:30:12.593 [main] [INFO ] org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [wiki.jixing.myblog.MyBlogApplicationTests]: MyBlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2022-06-30 17:30:12.737 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration wiki.jixing.myblog.MyBlogApplication for test class wiki.jixing.myblog.MyBlogApplicationTests
2022-06-30 17:30:12.880 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2022-06-30 17:30:12.926 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@143d9a93, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@40226788, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@4159e81b, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@5b5caf08, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@23cd4ff2, org.springframework.test.context.support.DirtiesContextTestExecutionListener@70807224, org.springframework.test.context.transaction.TransactionalTestExecutionListener@7e97551f, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@400d912a, org.springframework.test.context.event.EventPublishingTestExecutionListener@9f6e406, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@7a94b64e, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3e6f3bae, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@12477988, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@2caf6912, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@73d69c0f, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@34237b90]
2022-06-30 17:30:13.319 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- Starting MyBlogApplicationTests using Java 11.0.13 on DESKTOP-JIXING with PID 21424 (started by jixing in E:\IDEA_workspace\MyBlog)
2022-06-30 17:30:13.323 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- No active profile set, falling back to 1 default profile: "default"
2022-06-30 17:30:15.135 [main] [INFO ] com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure -- Init DruidDataSource
2022-06-30 17:30:15.434 [main] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} inited
2022-06-30 17:30:17.760 [main] [INFO ] org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping -- Adding welcome page template: index
2022-06-30 17:30:19.994 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- Started MyBlogApplicationTests in 7.026 seconds (JVM running for 9.782)
2022-06-30 17:30:20.941 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closing ...
2022-06-30 17:30:20.943 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closed
2022-06-30 17:30:30.601 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- Starting MyBlogApplication using Java 11.0.13 on DESKTOP-JIXING with PID 10712 (E:\IDEA_workspace\MyBlog\target\classes started by jixing in E:\IDEA_workspace\MyBlog)
2022-06-30 17:30:30.615 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- No active profile set, falling back to 1 default profile: "default"
2022-06-30 17:30:32.616 [main] [INFO ] org.springframework.boot.web.embedded.tomcat.TomcatWebServer -- Tomcat initialized with port(s): 8080 (http)
2022-06-30 17:30:32.632 [main] [INFO ] org.apache.coyote.http11.Http11NioProtocol -- Initializing ProtocolHandler ["http-nio-8080"]
2022-06-30 17:30:32.633 [main] [INFO ] org.apache.catalina.core.StandardService -- Starting service [Tomcat]
2022-06-30 17:30:32.633 [main] [INFO ] org.apache.catalina.core.StandardEngine -- Starting Servlet engine: [Apache Tomcat/9.0.64]
2022-06-30 17:30:32.717 [main] [INFO ] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -- Initializing Spring embedded WebApplicationContext
2022-06-30 17:30:32.718 [main] [INFO ] org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext -- Root WebApplicationContext: initialization completed in 2031 ms
2022-06-30 17:30:32.887 [main] [INFO ] com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure -- Init DruidDataSource
2022-06-30 17:30:32.970 [main] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} inited
2022-06-30 17:30:33.769 [main] [INFO ] org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping -- Adding welcome page template: index
2022-06-30 17:30:34.621 [main] [INFO ] org.apache.coyote.http11.Http11NioProtocol -- Starting ProtocolHandler ["http-nio-8080"]
2022-06-30 17:30:34.646 [main] [INFO ] org.springframework.boot.web.embedded.tomcat.TomcatWebServer -- Tomcat started on port(s): 8080 (http) with context path ''
2022-06-30 17:30:34.655 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- Started MyBlogApplication in 4.785 seconds (JVM running for 8.983)
2022-06-30 17:31:22.349 [http-nio-8080-exec-1] [INFO ] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -- Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-06-30 17:31:22.350 [http-nio-8080-exec-1] [INFO ] org.springframework.web.servlet.DispatcherServlet -- Initializing Servlet 'dispatcherServlet'
2022-06-30 17:31:22.352 [http-nio-8080-exec-1] [INFO ] org.springframework.web.servlet.DispatcherServlet -- Completed initialization in 1 ms
2022-06-30 17:31:22.397 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-06-30 17:31:23.112 [http-nio-8080-exec-6] [WARN ] org.apache.catalina.util.SessionIdGeneratorBase -- Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [222] milliseconds.
2022-06-30 17:31:23.126 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=0, message='获取失败', data=null}}
2022-06-30 17:31:23.293 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=15}}
2022-06-30 17:31:23.307 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=8}}
2022-06-30 17:31:23.360 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=10}}
2022-06-30 17:31:23.467 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:31:23.572 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=10, pages=2, list=[Article(id=15, title=test, content=#test
## test
### test, summary=#test
## test
### test, coverImg=/static/img/cover/8.jpg, status=1, views=1, createTime=2022-06-30, updateTime=2022-06-30, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3)]), Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:37:42.379 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/login', method='wiki.jixing.myblog.controller.PageController.login', args=[], result=admin/login}
2022-06-30 17:37:46.486 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/login', method='wiki.jixing.myblog.controller.UserController.login', args=[User(id=null, username=admin, email=null, password=admin, type=null, avatar=null, createTime=null, updateTime=null), org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=0, message='用户名或密码错误', data=null}}
2022-06-30 17:37:51.569 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/login', method='wiki.jixing.myblog.controller.UserController.login', args=[User(id=null, username=admin, email=null, password=admin123, type=null, avatar=null, createTime=null, updateTime=null), org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='登录成功', data=null}}
2022-06-30 17:37:53.098 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-06-30 17:37:53.333 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/count/1', method='wiki.jixing.myblog.controller.ArticleController.count', args=[1], result=Result{code=1, message='success', data=10}}
2022-06-30 17:37:53.336 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:37:53.340 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=8}}
2022-06-30 17:37:53.340 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:37:53.362 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:37:53.394 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=10, pages=2, list=[Article(id=15, title=test, content=#test
## test
### test, summary=#test
## test
### test, coverImg=/static/img/cover/8.jpg, status=1, views=1, createTime=2022-06-30, updateTime=2022-06-30, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3)]), Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:38:00.456 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin', method='wiki.jixing.myblog.controller.PageController.adminIndex', args=[], result=admin/admin-index}
2022-06-30 17:38:00.690 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:38:00.693 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=10}}
2022-06-30 17:38:00.696 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=8}}
2022-06-30 17:38:00.698 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:38:00.709 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=27, name=sssa, createTime=2022-06-30T14:23:22, updateTime=2022-06-30T14:23:28, articleCount=0), Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:38:00.721 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=6}}
2022-06-30 17:38:00.725 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:38:04.632 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/27', method='wiki.jixing.myblog.controller.CategoryController.remove', args=[27], result=Result{code=1, message='删除成功', data=null}}
2022-06-30 17:38:04.640 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=7}}
2022-06-30 17:38:04.649 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:38:06.600 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/comment', method='wiki.jixing.myblog.controller.PageController.AdminComment', args=[], result=admin/admin-comment}
2022-06-30 17:38:06.944 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/pg', method='wiki.jixing.myblog.controller.CommentController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=6, size=6, startRow=0, endRow=5, total=6, pages=1, list=[Comment(id=10, content=heihei, createTime=2022-06-30T14:22:23, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=7, content=haha, createTime=2022-06-29T21:28:08, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 17:38:17.541 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/10', method='wiki.jixing.myblog.controller.CommentController.remove', args=[10], result=Result{code=1, message='删除成功', data=null}}
2022-06-30 17:38:17.559 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/pg', method='wiki.jixing.myblog.controller.CommentController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=0, endRow=4, total=5, pages=1, list=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=7, content=haha, createTime=2022-06-29T21:28:08, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 17:38:19.482 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/user', method='wiki.jixing.myblog.controller.PageController.AdminUser', args=[], result=admin/admin-user}
2022-06-30 17:38:19.611 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user', method='wiki.jixing.myblog.controller.UserController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=14, pages=2, list=Page{count=true, pageNum=1, pageSize=7, startRow=0, endRow=7, total=14, pages=2, reasonable=false, pageSizeZero=false}[User(id=1, username=admin, email=admin@gmail.com, password=0192023a7bbd73250516f069df18b500, type=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, createTime=2022-06-26T12:46:15, updateTime=2022-06-26T12:46:15), User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08), User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17), User(id=6, username=jixing1, email=jjqwaxqg@meantinc.com, password=e10adc3949ba59abbe56e057f20f883e, type=0, avatar=null, createTime=2022-06-27T22:10:07, updateTime=2022-06-30T08:30:36), User(id=7, username=jixing2, email=rk1wczeg@meantinc.com, password=85dcfa489a012f5c9624b9b3db0d5e15, type=0, avatar=null, createTime=2022-06-27T22:16:54, updateTime=2022-06-27T22:16:54), User(id=8, username=jixing4, email=pqlegjjr@meantinc.com, password=85dcfa489a012f5c9624b9b3db0d5e15, type=0, avatar=null, createTime=2022-06-27T22:26:47, updateTime=2022-06-27T22:26:47), User(id=9, username=jixing5, email=71wjbj_4@meantinc.com, password=85dcfa489a012f5c9624b9b3db0d5e15, type=0, avatar=null, createTime=2022-06-27T22:30:29, updateTime=2022-06-27T22:30:29)], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:38:22.686 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/comment', method='wiki.jixing.myblog.controller.PageController.AdminComment', args=[], result=admin/admin-comment}
2022-06-30 17:38:22.823 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/pg', method='wiki.jixing.myblog.controller.CommentController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=0, endRow=4, total=5, pages=1, list=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=7, content=haha, createTime=2022-06-29T21:28:08, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 17:38:23.641 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/article', method='wiki.jixing.myblog.controller.PageController.article', args=[], result=admin/admin-article}
2022-06-30 17:38:23.792 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:38:23.922 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=12, pages=2, list=[Article(id=15, title=test, content=#test
## test
### test, summary=#test
## test
### test, coverImg=/static/img/cover/8.jpg, status=1, views=1, createTime=2022-06-30, updateTime=2022-06-30, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3)]), Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=9, title=Hadoop, content=Hadoop起源于Apache Nutch项目，始于2002年，是Apache Lucene的子项目之一 。2004年，Google在“操作系统设计与实现”（Operating System Design and Implementation，OSDI）会议上公开发表了题为MapReduce：Simplified Data Processing on Large Clusters（Mapreduce：简化大规模集群上的数据处理）的论文之后，受到启发的Doug Cutting等人开始尝试实现MapReduce计算框架，并将它与NDFS（Nutch Distributed File System）结合，用以支持Nutch引擎的主要算法 。由于NDFS和MapReduce在Nutch引擎中有着良好的应用，所以它们于2006年2月被分离出来，成为一套完整而独立的软件，并被命名为Hadoop。到了2008年年初，hadoop已成为Apache的顶级项目，包含众多子项目，被应用到包括Yahoo在内的很多互联网公司, summary=Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）。, coverImg=https://pic.imgdb.cn/item/62b7fafe2f25919088d2f513.jpg, status=0, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:38:24.409 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin', method='wiki.jixing.myblog.controller.PageController.adminIndex', args=[], result=admin/admin-index}
2022-06-30 17:38:24.559 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:38:24.564 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=10}}
2022-06-30 17:38:24.565 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:38:24.566 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories', method='wiki.jixing.myblog.controller.CategoryController.listAll', args=[], result=Result{code=1, message='success', data=7}}
2022-06-30 17:38:24.567 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=5}}
2022-06-30 17:38:24.574 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:38:24.586 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:38:24.975 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/article', method='wiki.jixing.myblog.controller.PageController.article', args=[], result=admin/admin-article}
2022-06-30 17:38:25.180 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:38:25.233 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=12, pages=2, list=[Article(id=15, title=test, content=#test
## test
### test, summary=#test
## test
### test, coverImg=/static/img/cover/8.jpg, status=1, views=1, createTime=2022-06-30, updateTime=2022-06-30, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3)]), Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=2), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=9, title=Hadoop, content=Hadoop起源于Apache Nutch项目，始于2002年，是Apache Lucene的子项目之一 。2004年，Google在“操作系统设计与实现”（Operating System Design and Implementation，OSDI）会议上公开发表了题为MapReduce：Simplified Data Processing on Large Clusters（Mapreduce：简化大规模集群上的数据处理）的论文之后，受到启发的Doug Cutting等人开始尝试实现MapReduce计算框架，并将它与NDFS（Nutch Distributed File System）结合，用以支持Nutch引擎的主要算法 。由于NDFS和MapReduce在Nutch引擎中有着良好的应用，所以它们于2006年2月被分离出来，成为一套完整而独立的软件，并被命名为Hadoop。到了2008年年初，hadoop已成为Apache的顶级项目，包含众多子项目，被应用到包括Yahoo在内的很多互联网公司, summary=Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）。, coverImg=https://pic.imgdb.cn/item/62b7fafe2f25919088d2f513.jpg, status=0, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:38:27.190 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/15', method='wiki.jixing.myblog.controller.ArticleController.remove', args=[15], result=Result{code=1, message='删除成功', data=null}}
2022-06-30 17:38:27.232 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=11, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=9, title=Hadoop, content=Hadoop起源于Apache Nutch项目，始于2002年，是Apache Lucene的子项目之一 。2004年，Google在“操作系统设计与实现”（Operating System Design and Implementation，OSDI）会议上公开发表了题为MapReduce：Simplified Data Processing on Large Clusters（Mapreduce：简化大规模集群上的数据处理）的论文之后，受到启发的Doug Cutting等人开始尝试实现MapReduce计算框架，并将它与NDFS（Nutch Distributed File System）结合，用以支持Nutch引擎的主要算法 。由于NDFS和MapReduce在Nutch引擎中有着良好的应用，所以它们于2006年2月被分离出来，成为一套完整而独立的软件，并被命名为Hadoop。到了2008年年初，hadoop已成为Apache的顶级项目，包含众多子项目，被应用到包括Yahoo在内的很多互联网公司, summary=Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）。, coverImg=https://pic.imgdb.cn/item/62b7fafe2f25919088d2f513.jpg, status=0, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:38:28.801 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin', method='wiki.jixing.myblog.controller.PageController.adminIndex', args=[], result=admin/admin-index}
2022-06-30 17:38:28.962 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:38:28.969 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/count/1', method='wiki.jixing.myblog.controller.ArticleController.count', args=[1], result=Result{code=1, message='success', data=15}}
2022-06-30 17:38:28.969 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/count/1', method='wiki.jixing.myblog.controller.ArticleController.count', args=[1], result=Result{code=1, message='success', data=15}}
2022-06-30 17:38:28.969 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/count', method='wiki.jixing.myblog.controller.CommentController.count', args=[], result=Result{code=1, message='success', data=9}}
2022-06-30 17:38:28.970 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/count', method='wiki.jixing.myblog.controller.CommentController.count', args=[], result=Result{code=1, message='success', data=5}}
2022-06-30 17:38:28.975 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/count', method='wiki.jixing.myblog.controller.CommentController.count', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:38:28.991 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:38:34.358 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-06-30 17:38:34.477 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/count/1', method='wiki.jixing.myblog.controller.ArticleController.count', args=[1], result=Result{code=1, message='success', data=9}}
2022-06-30 17:38:34.480 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=7}}
2022-06-30 17:38:34.481 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:38:34.482 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:38:34.496 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:38:34.511 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=9, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:39:48.418 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/category', method='wiki.jixing.myblog.controller.PageController.category', args=[], result=category}
2022-06-30 17:39:48.635 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:39:48.638 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:39:48.642 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=[{name=爬虫, value=1}, {name=大数据, value=1}, {name=算法, value=1}, {name=Web, value=1}, {name=前端, value=2}, {name=后端, value=2}, {name=语言, value=1}]}}
2022-06-30 17:40:45.616 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-06-30 17:40:45.823 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/count/1', method='wiki.jixing.myblog.controller.ArticleController.count', args=[1], result=Result{code=1, message='success', data=9}}
2022-06-30 17:40:45.828 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=7}}
2022-06-30 17:40:45.830 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:40:45.831 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:40:45.842 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:40:45.859 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=9, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:40:47.008 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/p/11', method='wiki.jixing.myblog.controller.PageController.detail', args=[11, {article=Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=null)}], result=detail}
2022-06-30 17:40:47.429 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:40:57.497 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles', method='wiki.jixing.myblog.controller.ArticleController.list', args=[2, 5, 1], result=Result{code=1, message='success', data=PageInfo{pageNum=2, pageSize=5, size=4, startRow=6, endRow=9, total=9, pages=2, list=[Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)]), Article(id=4, title=E - Shiritori (字符串Hash - 拓扑排序 - 博弈), content=[题目链接](https://atcoder.jp/contests/abc209/tasks/abc209_e)
![](https://pic.imgdb.cn/item/62b7f37a2f25919088c8b4a5.jpg)
![](https://pic.imgdb.cn/item/62b7f3ad2f25919088c8ed80.jpg)
![](https://pic.imgdb.cn/item/62b7f3ba2f25919088c8fdaa.jpg)
![](https://pic.imgdb.cn/item/62b7f3cf2f25919088c91788.jpg)
>1、走向必败态的为必胜态
>2、走向必胜态或者无法继续时为必败态
>3、其他情况为平局

>字符串首尾连边做成一个有向图，因为下一步的选择与上一步的字符串结尾字符有关，所以我们这里建立反图，让让尾指向首做有向图

```cpp
#include <bits/stdc++.h>
	using namespace std;
	#define mem(a, b) memset(a, b, sizeof(a))
	#define int long long int
	#define endl '\n'
	typedef pair<int, int> PII;
	const int mod = 998244353;
	const int inf = 0x3f3f3f3f;
	const int N = 1e6 + 7;

	int Head[N], Edge[N], Next[N], idx;
	void add(int a, int b) {
		idx++;
		Edge[idx] = b;
		Next[idx] = Head[a];
		Head[a] = idx;
	}

	int f(char a) {
		if (a >= 'a' && a <= 'z')
			return a - 'a' + 26;
		else
			return a - 'A';
	}

	int get(string s) { //字符串Hash
		return f(s[0]) * 52 * 52 + f(s[1]) * 52 + f(s[2]);
	}

	int E[N];
	int d[N];    //能走向的边的数量 可以理解为出度，因为反向建图，此处是入度，但实际上是出度
	int ans[N];  //记录该点状态
	signed main() {
		mem(Head, -1);
		int n;
		cin >> n;
		string s;
		for (int i = 1; i <= n; i++) {
			cin >> s;
			string f = s.substr(0, 3);
			string e = s.substr(s.size() - 3);  // 取前三个和后三个字符
			int a = get(f), b = get(e); //取Hash值
			E[i] = b;
			add(b, a);  //反向建图
			d[a]++;
		}
		queue<int> q;
		mem(ans, -1);  //既不是必败也不是必胜态，初始化为平局
		for (int i = 0; i < 52 * 52 * 52; i++) {
			if (d[i] == 0) {  //出度为0的点 也就是没有能继续往下走的边，此时为必败态
				ans[i] = 0;   //记录该点为必败态
				q.push(i);
			}
		}
		while (!q.empty()) {  //反向BFS，判断该点能否走到必败态，类似拓扑排序
			int t = q.front();
			q.pop();
			for (int i = Head[t]; ~i; i = Next[i]) {
				int e = Edge[i];
				if (ans[e] == -1) {
					d[e]--;             //能走向的边的数量减1，此处是t->e  但是因为反向建图，实际上是e->t
					if (ans[t] == 0) {  //如果该点走向必败态，那么下一个人必输，这个点就是必胜态
						ans[e] = 1;     //记录状态
						q.push(e);
					} else if (d[e] == 0) {  //如果没有边可以走,那该点为必败态
						ans[e] = 0;
						q.push(e);
					} //其他情况为平局
				}
			}
		}
		for (int i = 1; i <= n; i++) {
			if (ans[E[i]] == -1)
				cout << "Draw" << endl;
			else if (ans[E[i]] == 1)
				cout << "Aoki" << endl;
			else
				cout << "Takahashi" << endl;
		}
		return 0;
	}

	/*
	*
	*　　┏┓　　　┏┓+ +
	*　┏┛┻━━━┛┻┓ + +
	*　┃　　　　　　　┃
	*　┃　　　━　　　┃ ++ + + +
	*  ████━████+
	*  ◥██◤　◥██◤ +
	*　┃　　　┻　　　┃
	*　┃　　　　　　　┃ + +
	*　┗━┓　　　┏━┛
	*　　　┃　　　┃ + + + +Code is far away from 　
	*　　　┃　　　┃ + bug with the animal protecting
	*　　　┃　 　 ┗━━━┓ 神兽保佑,代码无bug　
	*　　　┃ 　　　　　　 ┣┓
	*　　  ┃ 　　　　　 　┏┛
	*　    ┗┓┓┏━┳┓┏┛ + + + +
	*　　　　┃┫┫　┃┫┫
	*　　　　┗┻┛　┗┻┛+ + + +
	*/
```

, summary=1、走向必败态的为必胜态
2、走向必胜态或者无法继续时为必败态
3、其他情况为平局

字符串首尾连边做成一个有向图，因为下一步的选择与上一步的字符串结尾字符有关，所以我们这里建立反图，让让尾指向首做有向图
, coverImg=/static/img/cover/5.jpg, status=1, views=18, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), tags=[Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3)]), Article(id=2, title=Spring Boot, content=##Spring Boot 框架
Spring框架是Java平台上的一种开源应用框架，提供具有控制反转特性的容器。尽管Spring框架自身对编程模型没有限制，但其在Java应用中的频繁使用让它备受青睐，以至于后来让它作为EJB（EnterpriseJavaBeans）模型的补充，甚至是替补。Spring框架为开发提供了一系列的解决方案，比如利用控制反转的核心特性，并通过依赖注入实现控制反转来实现管理对象生命周期容器化，利用面向切面编程进行声明式的事务管理，整合多种持久化技术管理数据访问，提供大量优秀的Web框架方便开发等等。Spring框架具有控制反转（IOC）特性，IOC旨在方便项目维护和测试，它提供了一种通过Java的反射机制对Java对象进行统一的配置和管理的方法。Spring框架利用容器管理对象的生命周期，容器可以通过扫描XML文件或类上特定Java注解来配置对象，开发者可以通过依赖查找或依赖注入来获得对象。Spring框架具有面向切面编程（AOP）框架，SpringAOP框架基于代理模式，同时运行时可配置；AOP框架主要针对模块之间的交叉关注点进行模块化。Spring框架的AOP框架仅提供基本的AOP特性，虽无法与AspectJ框架相比，但通过与AspectJ的集成，也可以满足基本需求。Spring框架下的事务管理、远程访问等功能均可以通过使用SpringAOP技术实现。Spring的事务管理框架为Java平台带来了一种抽象机制，使本地和全局事务以及嵌套事务能够与保存点一起工作，并且几乎可以在Java平台的任何环境中工作。Spring集成多种事务模板，系统可以通过事务模板、XML或Java注解进行事务配置，并且事务框架集成了消息传递和缓存等功能。Spring的数据访问框架解决了开发人员在应用程序中使用数据库时遇到的常见困难。它不仅对Java:JDBC、iBATS/MyBATIs、Hibernate、Java数据对象（JDO）、ApacheOJB和ApacheCayne等所有流行的数据访问框架中提供支持，同时还可以与Spring的事务管理一起使用，为数据访问提供了灵活的抽象。Spring框架最初是没有打算构建一个自己的WebMVC框架，其开发人员在开发过程中认为现有的StrutsWeb框架的呈现层和请求处理层之间以及请求处理层和模型之间的分离不够，于是创建了SpringMVC。, summary=Spring框架是Java平台上的一种开源应用框架，提供具有控制反转特性的容器。尽管Spring框架自身对编程模型没有限制，但其在Java应用中的频繁使用让它备受青睐，以至于后来让它作为EJB（EnterpriseJavaBeans）模型的补充，甚至是替补。Spring框架为开发提供了一系列的解决方案，比如利用控制反转的核心特性，并通过依赖注入实现控制反转来实现管, coverImg=https://pic.imgdb.cn/item/6279b94e0947543129f458e3.jpg, status=1, views=3, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=1, title=Markdown语言, content=## 主要内容
> #### Markdown*是什么*？
> #### *谁*创造了它？
> #### *为什么*要使用它？
> #### *怎么*使用？
> #### *谁*在用？
> #### 尝试一下
## 正文
### 1. Markdown*是什么*？
**Markdown**是一种轻量级**标记语言**，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。    
**Markdown**也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    

### 2. *谁*创造了它？
它由[**Aaron Swartz**](http://www.aaronsw.com/)和**John Gruber**共同设计，**Aaron Swartz**就是那位于去年（*2013年1月11日*）自杀,有着**开挂**一般人生经历的程序员。维基百科对他的[介绍](http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8)是：**软件工程师、作家、政治组织者、互联网活动家、维基百科人**。    

他有着足以让你跪拜的人生经历：    
+ **14岁**参与RSS 1.0规格标准的制订。     
+ **2004**年入读**斯坦福**，之后退学。   
+ **2005**年创建[Infogami](http://infogami.org/)，之后与[Reddit](http://www.reddit.com/)合并成为其合伙人。   
+ **2010**年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   
+ **2011**年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     
+ **2013**年1月自杀身亡。    

![Aaron Swartz](https://pic.imgdb.cn/item/62b7ebcd2f25919088bf1b21.jpg)

天才都有早逝的归途。

### 3. *为什么*要使用它？
+ 它是易读（看起来舒服）、易写（语法简单）、易更改**纯文本**。处处体现着**极简主义**的影子。
+ 兼容HTML，可以转换为HTML格式发布。
+ 跨平台使用。
+ 越来越多的网站支持Markdown。
+ 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）
+ 摆脱Word（我不是认真的）。

### 4. *怎么*使用？
如果不算**扩展**，Markdown的语法绝对**简单**到让你爱不释手。

Markdown语法主要分为如下几大部分：
**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\`**，**符号'`'**。

#### 4.1 标题
两种形式：  
1）使用`=`和`-`标记一级和二级标题。
> 一级标题   
> `=========`   
> 二级标题    
> `---------`
效果：
> 一级标题   
> =========   
> 二级标题
> ---------  
2）使用`#`，可表示1-6级标题。
> \# 一级标题   
> \## 二级标题   
> \### 三级标题   
> \#### 四级标题   
> \##### 五级标题   
> \###### 六级标题    
效果：
> # 一级标题   
> ## 二级标题   
> ### 三级标题   
> #### 四级标题   
> ##### 五级标题   
> ###### 六级标题
#### 4.2 段落
段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。

#### 4.3 区块引用
在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：
> \> 区块引用  
> \>> 嵌套引用  
效果：
> 区块引用  
>> 嵌套引用
#### 4.4 代码区块
代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    

普通段落：
void main()    
{    
    printf("Hello, Markdown.");    
}    

代码区块：

    void main()
    {
        printf("Hello, Markdown.");
    }

**注意**:需要和普通段落之间存在空行。

#### 4.5 强调
在强调内容两侧分别加上`*`或者`_`，如：
> \*斜体\*，\_斜体\_    
> \*\*粗体\*\*，\_\_粗体\_\_
效果：
> *斜体*，_斜体_    
> **粗体**，__粗体__
#### 4.6 列表
使用`·`、`+`、或`-`标记无序列表，如：
> \-（+\*） 第一项
> \-（+\*） 第二项
> \- （+\*）第三项
**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。

效果：
> + 第一项
> + 第二项
> + 第三项
有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：
> 1 . 第一项   
> 2 . 第二项    
> 3 . 第三项    
效果：
> 1. 第一项
> 2. 第二项
> 3. 第三项
#### 4.7 分割线
分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。

#### 4.8 链接
链接可以由两种形式生成：**行内式**和**参考式**。    
**行内式**：
> \[younghz的Markdown库\]\(https:://github.com/younghz/Markdown "Markdown"\)。
效果：
> [younghz的Markdown库](https:://github.com/younghz/Markdown "Markdown")。
**参考式**：
> \[younghz的Markdown库1\]\[1\]    
> \[younghz的Markdown库2\]\[2\]    
> \[1\]:https:://github.com/younghz/Markdown "Markdown"    
> \[2\]:https:://github.com/younghz/Markdown "Markdown"    
效果：
> [younghz的Markdown库1][1]    
> [younghz的Markdown库2][2]
[1]: https:://github.com/younghz/Markdown "Markdown"
[2]: https:://github.com/younghz/Markdown "Markdown"

**注意**：上述的`[1]:https:://github.com/younghz/Markdown "Markdown"`不出现在区块中。

#### 4.9 图片
添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。
#### 4.10 反斜杠`\`
相当于**反转义**作用。使符号成为普通符号。
#### 4.11 符号'`'
起到标记作用。如：
>\`ctrl+a\`

效果：
>`ctrl+a`    
#### 5. *谁*在用？
Markdown的使用者：
+ GitHub
+ 简书
+ Stack Overflow
+ Apollo
+ Moodle
+ Reddit
+ 等等

#### 6. 尝试一下
+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。
+ **在线**的dillinger.io评价也不错   
+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    
+ **Mac**下的Mou是国人贡献的，口碑很好。
+ **Linux**下的ReText不错。    

**当然，最终境界永远都是笔下是语法，心中格式化 :)。**

****
**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。
虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]
(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。
****
以上基本是所有traditonal markdown的语法。

### 其它：
列表的使用(非traditonal markdown)：

用`|`表示表格纵向边界，表头和表内容用`-`隔开，并可用`:`进行对齐设置，两边都有`:`则表示居中，若不加`:`则默认左对齐。

|代码库                              |链接                                |
|:------------------------------------:|------------------------------------|
|MarkDown                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|
|MarkDownCopy                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|, summary=Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。, coverImg=https://pic.imgdb.cn/item/62b7eade2f25919088be05f8.jpg, status=1, views=25, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1), tags=[Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1)])], prePage=1, nextPage=0, isFirstPage=false, isLastPage=true, hasPreviousPage=true, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:40:58.992 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/p/1', method='wiki.jixing.myblog.controller.PageController.detail', args=[1, {article=Article(id=1, title=Markdown语言, content=## 主要内容
> #### Markdown*是什么*？
> #### *谁*创造了它？
> #### *为什么*要使用它？
> #### *怎么*使用？
> #### *谁*在用？
> #### 尝试一下
## 正文
### 1. Markdown*是什么*？
**Markdown**是一种轻量级**标记语言**，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。    
**Markdown**也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    

### 2. *谁*创造了它？
它由[**Aaron Swartz**](http://www.aaronsw.com/)和**John Gruber**共同设计，**Aaron Swartz**就是那位于去年（*2013年1月11日*）自杀,有着**开挂**一般人生经历的程序员。维基百科对他的[介绍](http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8)是：**软件工程师、作家、政治组织者、互联网活动家、维基百科人**。    

他有着足以让你跪拜的人生经历：    
+ **14岁**参与RSS 1.0规格标准的制订。     
+ **2004**年入读**斯坦福**，之后退学。   
+ **2005**年创建[Infogami](http://infogami.org/)，之后与[Reddit](http://www.reddit.com/)合并成为其合伙人。   
+ **2010**年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   
+ **2011**年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     
+ **2013**年1月自杀身亡。    

![Aaron Swartz](https://pic.imgdb.cn/item/62b7ebcd2f25919088bf1b21.jpg)

天才都有早逝的归途。

### 3. *为什么*要使用它？
+ 它是易读（看起来舒服）、易写（语法简单）、易更改**纯文本**。处处体现着**极简主义**的影子。
+ 兼容HTML，可以转换为HTML格式发布。
+ 跨平台使用。
+ 越来越多的网站支持Markdown。
+ 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）
+ 摆脱Word（我不是认真的）。

### 4. *怎么*使用？
如果不算**扩展**，Markdown的语法绝对**简单**到让你爱不释手。

Markdown语法主要分为如下几大部分：
**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\`**，**符号'`'**。

#### 4.1 标题
两种形式：  
1）使用`=`和`-`标记一级和二级标题。
> 一级标题   
> `=========`   
> 二级标题    
> `---------`
效果：
> 一级标题   
> =========   
> 二级标题
> ---------  
2）使用`#`，可表示1-6级标题。
> \# 一级标题   
> \## 二级标题   
> \### 三级标题   
> \#### 四级标题   
> \##### 五级标题   
> \###### 六级标题    
效果：
> # 一级标题   
> ## 二级标题   
> ### 三级标题   
> #### 四级标题   
> ##### 五级标题   
> ###### 六级标题
#### 4.2 段落
段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。

#### 4.3 区块引用
在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：
> \> 区块引用  
> \>> 嵌套引用  
效果：
> 区块引用  
>> 嵌套引用
#### 4.4 代码区块
代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    

普通段落：
void main()    
{    
    printf("Hello, Markdown.");    
}    

代码区块：

    void main()
    {
        printf("Hello, Markdown.");
    }

**注意**:需要和普通段落之间存在空行。

#### 4.5 强调
在强调内容两侧分别加上`*`或者`_`，如：
> \*斜体\*，\_斜体\_    
> \*\*粗体\*\*，\_\_粗体\_\_
效果：
> *斜体*，_斜体_    
> **粗体**，__粗体__
#### 4.6 列表
使用`·`、`+`、或`-`标记无序列表，如：
> \-（+\*） 第一项
> \-（+\*） 第二项
> \- （+\*）第三项
**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。

效果：
> + 第一项
> + 第二项
> + 第三项
有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：
> 1 . 第一项   
> 2 . 第二项    
> 3 . 第三项    
效果：
> 1. 第一项
> 2. 第二项
> 3. 第三项
#### 4.7 分割线
分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。

#### 4.8 链接
链接可以由两种形式生成：**行内式**和**参考式**。    
**行内式**：
> \[younghz的Markdown库\]\(https:://github.com/younghz/Markdown "Markdown"\)。
效果：
> [younghz的Markdown库](https:://github.com/younghz/Markdown "Markdown")。
**参考式**：
> \[younghz的Markdown库1\]\[1\]    
> \[younghz的Markdown库2\]\[2\]    
> \[1\]:https:://github.com/younghz/Markdown "Markdown"    
> \[2\]:https:://github.com/younghz/Markdown "Markdown"    
效果：
> [younghz的Markdown库1][1]    
> [younghz的Markdown库2][2]
[1]: https:://github.com/younghz/Markdown "Markdown"
[2]: https:://github.com/younghz/Markdown "Markdown"

**注意**：上述的`[1]:https:://github.com/younghz/Markdown "Markdown"`不出现在区块中。

#### 4.9 图片
添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。
#### 4.10 反斜杠`\`
相当于**反转义**作用。使符号成为普通符号。
#### 4.11 符号'`'
起到标记作用。如：
>\`ctrl+a\`

效果：
>`ctrl+a`    
#### 5. *谁*在用？
Markdown的使用者：
+ GitHub
+ 简书
+ Stack Overflow
+ Apollo
+ Moodle
+ Reddit
+ 等等

#### 6. 尝试一下
+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。
+ **在线**的dillinger.io评价也不错   
+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    
+ **Mac**下的Mou是国人贡献的，口碑很好。
+ **Linux**下的ReText不错。    

**当然，最终境界永远都是笔下是语法，心中格式化 :)。**

****
**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。
虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]
(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。
****
以上基本是所有traditonal markdown的语法。

### 其它：
列表的使用(非traditonal markdown)：

用`|`表示表格纵向边界，表头和表内容用`-`隔开，并可用`:`进行对齐设置，两边都有`:`则表示居中，若不加`:`则默认左对齐。

|代码库                              |链接                                |
|:------------------------------------:|------------------------------------|
|MarkDown                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|
|MarkDownCopy                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|, summary=Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。, coverImg=https://pic.imgdb.cn/item/62b7eade2f25919088be05f8.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1), tags=null)}], result=detail}
2022-06-30 17:40:59.238 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:41:33.716 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/archive', method='wiki.jixing.myblog.controller.PageController.archive', args=[], result=archive}
2022-06-30 17:41:33.883 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:41:33.941 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles', method='wiki.jixing.myblog.controller.ArticleController.list', args=[null, null, 1], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=9, size=9, startRow=0, endRow=8, total=9, pages=1, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)]), Article(id=4, title=E - Shiritori (字符串Hash - 拓扑排序 - 博弈), content=[题目链接](https://atcoder.jp/contests/abc209/tasks/abc209_e)
![](https://pic.imgdb.cn/item/62b7f37a2f25919088c8b4a5.jpg)
![](https://pic.imgdb.cn/item/62b7f3ad2f25919088c8ed80.jpg)
![](https://pic.imgdb.cn/item/62b7f3ba2f25919088c8fdaa.jpg)
![](https://pic.imgdb.cn/item/62b7f3cf2f25919088c91788.jpg)
>1、走向必败态的为必胜态
>2、走向必胜态或者无法继续时为必败态
>3、其他情况为平局

>字符串首尾连边做成一个有向图，因为下一步的选择与上一步的字符串结尾字符有关，所以我们这里建立反图，让让尾指向首做有向图

```cpp
#include <bits/stdc++.h>
	using namespace std;
	#define mem(a, b) memset(a, b, sizeof(a))
	#define int long long int
	#define endl '\n'
	typedef pair<int, int> PII;
	const int mod = 998244353;
	const int inf = 0x3f3f3f3f;
	const int N = 1e6 + 7;

	int Head[N], Edge[N], Next[N], idx;
	void add(int a, int b) {
		idx++;
		Edge[idx] = b;
		Next[idx] = Head[a];
		Head[a] = idx;
	}

	int f(char a) {
		if (a >= 'a' && a <= 'z')
			return a - 'a' + 26;
		else
			return a - 'A';
	}

	int get(string s) { //字符串Hash
		return f(s[0]) * 52 * 52 + f(s[1]) * 52 + f(s[2]);
	}

	int E[N];
	int d[N];    //能走向的边的数量 可以理解为出度，因为反向建图，此处是入度，但实际上是出度
	int ans[N];  //记录该点状态
	signed main() {
		mem(Head, -1);
		int n;
		cin >> n;
		string s;
		for (int i = 1; i <= n; i++) {
			cin >> s;
			string f = s.substr(0, 3);
			string e = s.substr(s.size() - 3);  // 取前三个和后三个字符
			int a = get(f), b = get(e); //取Hash值
			E[i] = b;
			add(b, a);  //反向建图
			d[a]++;
		}
		queue<int> q;
		mem(ans, -1);  //既不是必败也不是必胜态，初始化为平局
		for (int i = 0; i < 52 * 52 * 52; i++) {
			if (d[i] == 0) {  //出度为0的点 也就是没有能继续往下走的边，此时为必败态
				ans[i] = 0;   //记录该点为必败态
				q.push(i);
			}
		}
		while (!q.empty()) {  //反向BFS，判断该点能否走到必败态，类似拓扑排序
			int t = q.front();
			q.pop();
			for (int i = Head[t]; ~i; i = Next[i]) {
				int e = Edge[i];
				if (ans[e] == -1) {
					d[e]--;             //能走向的边的数量减1，此处是t->e  但是因为反向建图，实际上是e->t
					if (ans[t] == 0) {  //如果该点走向必败态，那么下一个人必输，这个点就是必胜态
						ans[e] = 1;     //记录状态
						q.push(e);
					} else if (d[e] == 0) {  //如果没有边可以走,那该点为必败态
						ans[e] = 0;
						q.push(e);
					} //其他情况为平局
				}
			}
		}
		for (int i = 1; i <= n; i++) {
			if (ans[E[i]] == -1)
				cout << "Draw" << endl;
			else if (ans[E[i]] == 1)
				cout << "Aoki" << endl;
			else
				cout << "Takahashi" << endl;
		}
		return 0;
	}

	/*
	*
	*　　┏┓　　　┏┓+ +
	*　┏┛┻━━━┛┻┓ + +
	*　┃　　　　　　　┃
	*　┃　　　━　　　┃ ++ + + +
	*  ████━████+
	*  ◥██◤　◥██◤ +
	*　┃　　　┻　　　┃
	*　┃　　　　　　　┃ + +
	*　┗━┓　　　┏━┛
	*　　　┃　　　┃ + + + +Code is far away from 　
	*　　　┃　　　┃ + bug with the animal protecting
	*　　　┃　 　 ┗━━━┓ 神兽保佑,代码无bug　
	*　　　┃ 　　　　　　 ┣┓
	*　　  ┃ 　　　　　 　┏┛
	*　    ┗┓┓┏━┳┓┏┛ + + + +
	*　　　　┃┫┫　┃┫┫
	*　　　　┗┻┛　┗┻┛+ + + +
	*/
```

, summary=1、走向必败态的为必胜态
2、走向必胜态或者无法继续时为必败态
3、其他情况为平局

字符串首尾连边做成一个有向图，因为下一步的选择与上一步的字符串结尾字符有关，所以我们这里建立反图，让让尾指向首做有向图
, coverImg=/static/img/cover/5.jpg, status=1, views=18, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), tags=[Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3)]), Article(id=2, title=Spring Boot, content=##Spring Boot 框架
Spring框架是Java平台上的一种开源应用框架，提供具有控制反转特性的容器。尽管Spring框架自身对编程模型没有限制，但其在Java应用中的频繁使用让它备受青睐，以至于后来让它作为EJB（EnterpriseJavaBeans）模型的补充，甚至是替补。Spring框架为开发提供了一系列的解决方案，比如利用控制反转的核心特性，并通过依赖注入实现控制反转来实现管理对象生命周期容器化，利用面向切面编程进行声明式的事务管理，整合多种持久化技术管理数据访问，提供大量优秀的Web框架方便开发等等。Spring框架具有控制反转（IOC）特性，IOC旨在方便项目维护和测试，它提供了一种通过Java的反射机制对Java对象进行统一的配置和管理的方法。Spring框架利用容器管理对象的生命周期，容器可以通过扫描XML文件或类上特定Java注解来配置对象，开发者可以通过依赖查找或依赖注入来获得对象。Spring框架具有面向切面编程（AOP）框架，SpringAOP框架基于代理模式，同时运行时可配置；AOP框架主要针对模块之间的交叉关注点进行模块化。Spring框架的AOP框架仅提供基本的AOP特性，虽无法与AspectJ框架相比，但通过与AspectJ的集成，也可以满足基本需求。Spring框架下的事务管理、远程访问等功能均可以通过使用SpringAOP技术实现。Spring的事务管理框架为Java平台带来了一种抽象机制，使本地和全局事务以及嵌套事务能够与保存点一起工作，并且几乎可以在Java平台的任何环境中工作。Spring集成多种事务模板，系统可以通过事务模板、XML或Java注解进行事务配置，并且事务框架集成了消息传递和缓存等功能。Spring的数据访问框架解决了开发人员在应用程序中使用数据库时遇到的常见困难。它不仅对Java:JDBC、iBATS/MyBATIs、Hibernate、Java数据对象（JDO）、ApacheOJB和ApacheCayne等所有流行的数据访问框架中提供支持，同时还可以与Spring的事务管理一起使用，为数据访问提供了灵活的抽象。Spring框架最初是没有打算构建一个自己的WebMVC框架，其开发人员在开发过程中认为现有的StrutsWeb框架的呈现层和请求处理层之间以及请求处理层和模型之间的分离不够，于是创建了SpringMVC。, summary=Spring框架是Java平台上的一种开源应用框架，提供具有控制反转特性的容器。尽管Spring框架自身对编程模型没有限制，但其在Java应用中的频繁使用让它备受青睐，以至于后来让它作为EJB（EnterpriseJavaBeans）模型的补充，甚至是替补。Spring框架为开发提供了一系列的解决方案，比如利用控制反转的核心特性，并通过依赖注入实现控制反转来实现管, coverImg=https://pic.imgdb.cn/item/6279b94e0947543129f458e3.jpg, status=1, views=3, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=1, title=Markdown语言, content=## 主要内容
> #### Markdown*是什么*？
> #### *谁*创造了它？
> #### *为什么*要使用它？
> #### *怎么*使用？
> #### *谁*在用？
> #### 尝试一下
## 正文
### 1. Markdown*是什么*？
**Markdown**是一种轻量级**标记语言**，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。    
**Markdown**也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    

### 2. *谁*创造了它？
它由[**Aaron Swartz**](http://www.aaronsw.com/)和**John Gruber**共同设计，**Aaron Swartz**就是那位于去年（*2013年1月11日*）自杀,有着**开挂**一般人生经历的程序员。维基百科对他的[介绍](http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8)是：**软件工程师、作家、政治组织者、互联网活动家、维基百科人**。    

他有着足以让你跪拜的人生经历：    
+ **14岁**参与RSS 1.0规格标准的制订。     
+ **2004**年入读**斯坦福**，之后退学。   
+ **2005**年创建[Infogami](http://infogami.org/)，之后与[Reddit](http://www.reddit.com/)合并成为其合伙人。   
+ **2010**年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   
+ **2011**年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     
+ **2013**年1月自杀身亡。    

![Aaron Swartz](https://pic.imgdb.cn/item/62b7ebcd2f25919088bf1b21.jpg)

天才都有早逝的归途。

### 3. *为什么*要使用它？
+ 它是易读（看起来舒服）、易写（语法简单）、易更改**纯文本**。处处体现着**极简主义**的影子。
+ 兼容HTML，可以转换为HTML格式发布。
+ 跨平台使用。
+ 越来越多的网站支持Markdown。
+ 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）
+ 摆脱Word（我不是认真的）。

### 4. *怎么*使用？
如果不算**扩展**，Markdown的语法绝对**简单**到让你爱不释手。

Markdown语法主要分为如下几大部分：
**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\`**，**符号'`'**。

#### 4.1 标题
两种形式：  
1）使用`=`和`-`标记一级和二级标题。
> 一级标题   
> `=========`   
> 二级标题    
> `---------`
效果：
> 一级标题   
> =========   
> 二级标题
> ---------  
2）使用`#`，可表示1-6级标题。
> \# 一级标题   
> \## 二级标题   
> \### 三级标题   
> \#### 四级标题   
> \##### 五级标题   
> \###### 六级标题    
效果：
> # 一级标题   
> ## 二级标题   
> ### 三级标题   
> #### 四级标题   
> ##### 五级标题   
> ###### 六级标题
#### 4.2 段落
段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。

#### 4.3 区块引用
在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：
> \> 区块引用  
> \>> 嵌套引用  
效果：
> 区块引用  
>> 嵌套引用
#### 4.4 代码区块
代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    

普通段落：
void main()    
{    
    printf("Hello, Markdown.");    
}    

代码区块：

    void main()
    {
        printf("Hello, Markdown.");
    }

**注意**:需要和普通段落之间存在空行。

#### 4.5 强调
在强调内容两侧分别加上`*`或者`_`，如：
> \*斜体\*，\_斜体\_    
> \*\*粗体\*\*，\_\_粗体\_\_
效果：
> *斜体*，_斜体_    
> **粗体**，__粗体__
#### 4.6 列表
使用`·`、`+`、或`-`标记无序列表，如：
> \-（+\*） 第一项
> \-（+\*） 第二项
> \- （+\*）第三项
**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。

效果：
> + 第一项
> + 第二项
> + 第三项
有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：
> 1 . 第一项   
> 2 . 第二项    
> 3 . 第三项    
效果：
> 1. 第一项
> 2. 第二项
> 3. 第三项
#### 4.7 分割线
分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。

#### 4.8 链接
链接可以由两种形式生成：**行内式**和**参考式**。    
**行内式**：
> \[younghz的Markdown库\]\(https:://github.com/younghz/Markdown "Markdown"\)。
效果：
> [younghz的Markdown库](https:://github.com/younghz/Markdown "Markdown")。
**参考式**：
> \[younghz的Markdown库1\]\[1\]    
> \[younghz的Markdown库2\]\[2\]    
> \[1\]:https:://github.com/younghz/Markdown "Markdown"    
> \[2\]:https:://github.com/younghz/Markdown "Markdown"    
效果：
> [younghz的Markdown库1][1]    
> [younghz的Markdown库2][2]
[1]: https:://github.com/younghz/Markdown "Markdown"
[2]: https:://github.com/younghz/Markdown "Markdown"

**注意**：上述的`[1]:https:://github.com/younghz/Markdown "Markdown"`不出现在区块中。

#### 4.9 图片
添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。
#### 4.10 反斜杠`\`
相当于**反转义**作用。使符号成为普通符号。
#### 4.11 符号'`'
起到标记作用。如：
>\`ctrl+a\`

效果：
>`ctrl+a`    
#### 5. *谁*在用？
Markdown的使用者：
+ GitHub
+ 简书
+ Stack Overflow
+ Apollo
+ Moodle
+ Reddit
+ 等等

#### 6. 尝试一下
+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。
+ **在线**的dillinger.io评价也不错   
+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    
+ **Mac**下的Mou是国人贡献的，口碑很好。
+ **Linux**下的ReText不错。    

**当然，最终境界永远都是笔下是语法，心中格式化 :)。**

****
**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。
虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]
(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。
****
以上基本是所有traditonal markdown的语法。

### 其它：
列表的使用(非traditonal markdown)：

用`|`表示表格纵向边界，表头和表内容用`-`隔开，并可用`:`进行对齐设置，两边都有`:`则表示居中，若不加`:`则默认左对齐。

|代码库                              |链接                                |
|:------------------------------------:|------------------------------------|
|MarkDown                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|
|MarkDownCopy                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|, summary=Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。, coverImg=https://pic.imgdb.cn/item/62b7eade2f25919088be05f8.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1), tags=[Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1)])], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 17:42:27.495 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comment', method='wiki.jixing.myblog.controller.PageController.comment', args=[], result=comment}
2022-06-30 17:42:27.680 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:42:27.774 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[], result=Result{code=1, message='success', data=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=7, content=haha, createTime=2022-06-29T21:28:08, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))]}}
2022-06-30 17:42:41.558 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/comment', method='wiki.jixing.myblog.controller.PageController.AdminComment', args=[], result=admin/admin-comment}
2022-06-30 17:42:41.714 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/pg', method='wiki.jixing.myblog.controller.CommentController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=0, endRow=4, total=5, pages=1, list=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=7, content=haha, createTime=2022-06-29T21:28:08, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 17:42:45.621 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/7', method='wiki.jixing.myblog.controller.CommentController.remove', args=[7], result=Result{code=1, message='删除成功', data=null}}
2022-06-30 17:42:45.637 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/pg', method='wiki.jixing.myblog.controller.CommentController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=4, size=4, startRow=0, endRow=3, total=4, pages=1, list=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 17:42:48.745 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comment', method='wiki.jixing.myblog.controller.PageController.comment', args=[], result=comment}
2022-06-30 17:42:48.900 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:42:48.904 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))]}}
2022-06-30 17:43:12.218 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin', method='wiki.jixing.myblog.controller.PageController.adminIndex', args=[], result=admin/admin-index}
2022-06-30 17:43:12.357 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:43:12.369 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories', method='wiki.jixing.myblog.controller.CategoryController.listAll', args=[], result=Result{code=1, message='success', data=4}}
2022-06-30 17:43:12.453 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:43:12.453 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:43:12.461 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:43:12.480 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=9}}
2022-06-30 17:43:12.483 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:43:12.688 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/article', method='wiki.jixing.myblog.controller.PageController.article', args=[], result=admin/admin-article}
2022-06-30 17:43:12.825 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:43:12.855 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=11, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=9, title=Hadoop, content=Hadoop起源于Apache Nutch项目，始于2002年，是Apache Lucene的子项目之一 。2004年，Google在“操作系统设计与实现”（Operating System Design and Implementation，OSDI）会议上公开发表了题为MapReduce：Simplified Data Processing on Large Clusters（Mapreduce：简化大规模集群上的数据处理）的论文之后，受到启发的Doug Cutting等人开始尝试实现MapReduce计算框架，并将它与NDFS（Nutch Distributed File System）结合，用以支持Nutch引擎的主要算法 。由于NDFS和MapReduce在Nutch引擎中有着良好的应用，所以它们于2006年2月被分离出来，成为一套完整而独立的软件，并被命名为Hadoop。到了2008年年初，hadoop已成为Apache的顶级项目，包含众多子项目，被应用到包括Yahoo在内的很多互联网公司, summary=Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）。, coverImg=https://pic.imgdb.cn/item/62b7fafe2f25919088d2f513.jpg, status=0, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:43:13.587 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/edit', method='wiki.jixing.myblog.controller.PageController.edit', args=[], result=admin/admin-edit}
2022-06-30 17:43:13.753 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:43:13.757 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:43:22.203 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/m/11', method='wiki.jixing.myblog.controller.PageController.modify', args=[11, {article=Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=null), tagIds=[18, 16, 11]}], result=admin/admin-modify}
2022-06-30 17:43:22.347 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:43:22.351 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:44:11.708 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin', method='wiki.jixing.myblog.controller.PageController.adminIndex', args=[], result=admin/admin-index}
2022-06-30 17:44:11.874 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:44:11.877 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=7}}
2022-06-30 17:44:11.877 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=7}}
2022-06-30 17:44:11.879 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:44:11.879 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:44:11.885 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:44:11.890 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:44:35.693 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/article', method='wiki.jixing.myblog.controller.PageController.article', args=[], result=admin/admin-article}
2022-06-30 17:44:35.881 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:44:35.904 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=11, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=9, title=Hadoop, content=Hadoop起源于Apache Nutch项目，始于2002年，是Apache Lucene的子项目之一 。2004年，Google在“操作系统设计与实现”（Operating System Design and Implementation，OSDI）会议上公开发表了题为MapReduce：Simplified Data Processing on Large Clusters（Mapreduce：简化大规模集群上的数据处理）的论文之后，受到启发的Doug Cutting等人开始尝试实现MapReduce计算框架，并将它与NDFS（Nutch Distributed File System）结合，用以支持Nutch引擎的主要算法 。由于NDFS和MapReduce在Nutch引擎中有着良好的应用，所以它们于2006年2月被分离出来，成为一套完整而独立的软件，并被命名为Hadoop。到了2008年年初，hadoop已成为Apache的顶级项目，包含众多子项目，被应用到包括Yahoo在内的很多互联网公司, summary=Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）。, coverImg=https://pic.imgdb.cn/item/62b7fafe2f25919088d2f513.jpg, status=0, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:45:06.789 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/comment', method='wiki.jixing.myblog.controller.PageController.AdminComment', args=[], result=admin/admin-comment}
2022-06-30 17:45:06.957 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/pg', method='wiki.jixing.myblog.controller.CommentController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=4, size=4, startRow=0, endRow=3, total=4, pages=1, list=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 17:45:08.382 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/user', method='wiki.jixing.myblog.controller.PageController.AdminUser', args=[], result=admin/admin-user}
2022-06-30 17:45:08.503 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user', method='wiki.jixing.myblog.controller.UserController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=14, pages=2, list=Page{count=true, pageNum=1, pageSize=7, startRow=0, endRow=7, total=14, pages=2, reasonable=false, pageSizeZero=false}[User(id=1, username=admin, email=admin@gmail.com, password=0192023a7bbd73250516f069df18b500, type=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, createTime=2022-06-26T12:46:15, updateTime=2022-06-26T12:46:15), User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08), User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17), User(id=6, username=jixing1, email=jjqwaxqg@meantinc.com, password=e10adc3949ba59abbe56e057f20f883e, type=0, avatar=null, createTime=2022-06-27T22:10:07, updateTime=2022-06-30T08:30:36), User(id=7, username=jixing2, email=rk1wczeg@meantinc.com, password=85dcfa489a012f5c9624b9b3db0d5e15, type=0, avatar=null, createTime=2022-06-27T22:16:54, updateTime=2022-06-27T22:16:54), User(id=8, username=jixing4, email=pqlegjjr@meantinc.com, password=85dcfa489a012f5c9624b9b3db0d5e15, type=0, avatar=null, createTime=2022-06-27T22:26:47, updateTime=2022-06-27T22:26:47), User(id=9, username=jixing5, email=71wjbj_4@meantinc.com, password=85dcfa489a012f5c9624b9b3db0d5e15, type=0, avatar=null, createTime=2022-06-27T22:30:29, updateTime=2022-06-27T22:30:29)], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:45:10.293 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/comment', method='wiki.jixing.myblog.controller.PageController.AdminComment', args=[], result=admin/admin-comment}
2022-06-30 17:45:10.426 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments/pg', method='wiki.jixing.myblog.controller.CommentController.listAll', args=[1, 7], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=4, size=4, startRow=0, endRow=3, total=4, pages=1, list=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125254@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=1185225165@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 17:45:11.204 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/article', method='wiki.jixing.myblog.controller.PageController.article', args=[], result=admin/admin-article}
2022-06-30 17:45:11.349 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:45:11.369 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/s', method='wiki.jixing.myblog.controller.ArticleController.searchArticle', args=[1, 7, , null], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=11, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=9, title=Hadoop, content=Hadoop起源于Apache Nutch项目，始于2002年，是Apache Lucene的子项目之一 。2004年，Google在“操作系统设计与实现”（Operating System Design and Implementation，OSDI）会议上公开发表了题为MapReduce：Simplified Data Processing on Large Clusters（Mapreduce：简化大规模集群上的数据处理）的论文之后，受到启发的Doug Cutting等人开始尝试实现MapReduce计算框架，并将它与NDFS（Nutch Distributed File System）结合，用以支持Nutch引擎的主要算法 。由于NDFS和MapReduce在Nutch引擎中有着良好的应用，所以它们于2006年2月被分离出来，成为一套完整而独立的软件，并被命名为Hadoop。到了2008年年初，hadoop已成为Apache的顶级项目，包含众多子项目，被应用到包括Yahoo在内的很多互联网公司, summary=Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）。, coverImg=https://pic.imgdb.cn/item/62b7fafe2f25919088d2f513.jpg, status=0, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:45:23.896 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/logout', method='wiki.jixing.myblog.controller.UserController.logout', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功注销', data=null}}
2022-06-30 17:45:27.321 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/login', method='wiki.jixing.myblog.controller.PageController.login', args=[], result=admin/login}
2022-06-30 17:46:12.366 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/register', method='wiki.jixing.myblog.controller.PageController.register', args=[], result=admin/register}
2022-06-30 17:46:35.012 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/login', method='wiki.jixing.myblog.controller.PageController.login', args=[], result=admin/login}
2022-06-30 17:46:36.171 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/forget', method='wiki.jixing.myblog.controller.PageController.forget', args=[], result=admin/forget}
2022-06-30 17:50:13.624 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/login', method='wiki.jixing.myblog.controller.PageController.login', args=[], result=admin/login}
2022-06-30 17:50:19.233 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/login', method='wiki.jixing.myblog.controller.UserController.login', args=[User(id=null, username=admin, email=null, password=admin123, type=null, avatar=null, createTime=null, updateTime=null), org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='登录成功', data=null}}
2022-06-30 17:50:20.751 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-06-30 17:50:20.896 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=7}}
2022-06-30 17:50:20.896 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=9}}
2022-06-30 17:50:20.899 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:50:20.901 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:50:20.906 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:50:20.923 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=9, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:50:22.095 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comment', method='wiki.jixing.myblog.controller.PageController.comment', args=[], result=comment}
2022-06-30 17:50:22.216 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:50:22.218 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))]}}
2022-06-30 17:50:26.306 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comment', method='wiki.jixing.myblog.controller.PageController.comment', args=[], result=comment}
2022-06-30 17:50:26.423 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:50:26.425 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))]}}
2022-06-30 17:50:27.244 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comment', method='wiki.jixing.myblog.controller.PageController.comment', args=[], result=comment}
2022-06-30 17:50:27.350 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:50:27.352 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))]}}
2022-06-30 17:50:28.173 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comment', method='wiki.jixing.myblog.controller.PageController.comment', args=[], result=comment}
2022-06-30 17:50:28.317 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:50:28.321 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='success', data=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))]}}
2022-06-30 17:51:09.358 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin', method='wiki.jixing.myblog.controller.PageController.adminIndex', args=[], result=admin/admin-index}
2022-06-30 17:51:09.591 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@3b1ce483], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 17:51:09.594 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=9}}
2022-06-30 17:51:09.596 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=7}}
2022-06-30 17:51:09.597 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 17:51:09.601 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=4}}
2022-06-30 17:51:09.604 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:51:09.609 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 17:51:10.972 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/article', method='wiki.jixing.myblog.controller.PageController.article', args=[], result=admin/admin-article}
2022-06-30 17:51:11.118 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories', method='wiki.jixing.myblog.controller.CategoryController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:51:11.145 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories', method='wiki.jixing.myblog.controller.CategoryController.listAll', args=[], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=7, size=7, startRow=1, endRow=7, total=11, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=9, title=Hadoop, content=Hadoop起源于Apache Nutch项目，始于2002年，是Apache Lucene的子项目之一 。2004年，Google在“操作系统设计与实现”（Operating System Design and Implementation，OSDI）会议上公开发表了题为MapReduce：Simplified Data Processing on Large Clusters（Mapreduce：简化大规模集群上的数据处理）的论文之后，受到启发的Doug Cutting等人开始尝试实现MapReduce计算框架，并将它与NDFS（Nutch Distributed File System）结合，用以支持Nutch引擎的主要算法 。由于NDFS和MapReduce在Nutch引擎中有着良好的应用，所以它们于2006年2月被分离出来，成为一套完整而独立的软件，并被命名为Hadoop。到了2008年年初，hadoop已成为Apache的顶级项目，包含众多子项目，被应用到包括Yahoo在内的很多互联网公司, summary=Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。Hadoop实现了一个分布式文件系统（ Distributed File System），其中一个组件是HDFS（Hadoop Distributed File System）。, coverImg=https://pic.imgdb.cn/item/62b7fafe2f25919088d2f513.jpg, status=0, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 17:51:13.151 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/m/11', method='wiki.jixing.myblog.controller.PageController.modify', args=[11, {article=Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=null), tagIds=[18, 16, 11]}], result=admin/admin-modify}
2022-06-30 17:51:13.306 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 17:51:13.311 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 18:00:38.144 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closing ...
2022-06-30 18:00:38.155 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closed
2022-06-30 18:05:43.088 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Neither @ContextConfiguration nor @ContextHierarchy found for test class [wiki.jixing.myblog.MyBlogApplicationTests], using SpringBootContextLoader
2022-06-30 18:05:43.099 [main] [INFO ] org.springframework.test.context.support.AbstractContextLoader -- Could not detect default resource locations for test class [wiki.jixing.myblog.MyBlogApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2022-06-30 18:05:43.100 [main] [INFO ] org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [wiki.jixing.myblog.MyBlogApplicationTests]: MyBlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2022-06-30 18:05:43.180 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration wiki.jixing.myblog.MyBlogApplication for test class wiki.jixing.myblog.MyBlogApplicationTests
2022-06-30 18:05:43.254 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2022-06-30 18:05:43.268 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@143d9a93, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@40226788, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@4159e81b, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@5b5caf08, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@23cd4ff2, org.springframework.test.context.support.DirtiesContextTestExecutionListener@70807224, org.springframework.test.context.transaction.TransactionalTestExecutionListener@7e97551f, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@400d912a, org.springframework.test.context.event.EventPublishingTestExecutionListener@9f6e406, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@7a94b64e, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3e6f3bae, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@12477988, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@2caf6912, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@73d69c0f, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@34237b90]
2022-06-30 18:05:43.538 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- Starting MyBlogApplicationTests using Java 11.0.13 on DESKTOP-JIXING with PID 21088 (started by jixing in E:\IDEA_workspace\MyBlog)
2022-06-30 18:05:43.541 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- No active profile set, falling back to 1 default profile: "default"
2022-06-30 18:05:44.654 [main] [INFO ] com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure -- Init DruidDataSource
2022-06-30 18:05:44.800 [main] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} inited
2022-06-30 18:05:45.969 [main] [INFO ] org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping -- Adding welcome page template: index
2022-06-30 18:05:47.918 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- Started MyBlogApplicationTests in 4.623 seconds (JVM running for 5.851)
2022-06-30 18:05:48.326 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closing ...
2022-06-30 18:05:48.328 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closed
2022-06-30 18:05:54.063 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- Starting MyBlogApplication using Java 11.0.13 on DESKTOP-JIXING with PID 18144 (E:\IDEA_workspace\MyBlog\target\classes started by jixing in E:\IDEA_workspace\MyBlog)
2022-06-30 18:05:54.074 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- No active profile set, falling back to 1 default profile: "default"
2022-06-30 18:05:55.714 [main] [INFO ] org.springframework.boot.web.embedded.tomcat.TomcatWebServer -- Tomcat initialized with port(s): 8080 (http)
2022-06-30 18:05:55.725 [main] [INFO ] org.apache.coyote.http11.Http11NioProtocol -- Initializing ProtocolHandler ["http-nio-8080"]
2022-06-30 18:05:55.725 [main] [INFO ] org.apache.catalina.core.StandardService -- Starting service [Tomcat]
2022-06-30 18:05:55.726 [main] [INFO ] org.apache.catalina.core.StandardEngine -- Starting Servlet engine: [Apache Tomcat/9.0.64]
2022-06-30 18:05:55.798 [main] [INFO ] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -- Initializing Spring embedded WebApplicationContext
2022-06-30 18:05:55.799 [main] [INFO ] org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext -- Root WebApplicationContext: initialization completed in 1664 ms
2022-06-30 18:05:55.982 [main] [INFO ] com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure -- Init DruidDataSource
2022-06-30 18:05:56.061 [main] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} inited
2022-06-30 18:05:56.701 [main] [INFO ] org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping -- Adding welcome page template: index
2022-06-30 18:05:57.657 [main] [INFO ] org.apache.coyote.http11.Http11NioProtocol -- Starting ProtocolHandler ["http-nio-8080"]
2022-06-30 18:05:57.679 [main] [INFO ] org.springframework.boot.web.embedded.tomcat.TomcatWebServer -- Tomcat started on port(s): 8080 (http) with context path ''
2022-06-30 18:05:57.689 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- Started MyBlogApplication in 4.07 seconds (JVM running for 6.917)
2022-06-30 18:05:59.894 [http-nio-8080-exec-1] [INFO ] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -- Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-06-30 18:05:59.894 [http-nio-8080-exec-1] [INFO ] org.springframework.web.servlet.DispatcherServlet -- Initializing Servlet 'dispatcherServlet'
2022-06-30 18:05:59.895 [http-nio-8080-exec-1] [INFO ] org.springframework.web.servlet.DispatcherServlet -- Completed initialization in 0 ms
2022-06-30 18:05:59.935 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-06-30 18:06:00.592 [http-nio-8080-exec-7] [WARN ] org.apache.catalina.util.SessionIdGeneratorBase -- Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [238] milliseconds.
2022-06-30 18:06:00.608 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='success', data=15}}
2022-06-30 18:06:00.608 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='success', data=7}}
2022-06-30 18:06:00.612 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=0, message='获取失败', data=null}}
2022-06-30 18:06:00.629 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='success', data=9}}
2022-06-30 18:06:00.635 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 18:06:00.778 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=9, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 18:06:01.575 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/admin/login', method='wiki.jixing.myblog.controller.PageController.login', args=[], result=admin/login}
2022-06-30 18:06:07.764 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/login', method='wiki.jixing.myblog.controller.UserController.login', args=[User(id=null, username=admin, email=null, password=admin123, type=null, avatar=null, createTime=null, updateTime=null), org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='登录成功', data=null}}
2022-06-30 18:06:09.282 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-06-30 18:06:09.428 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/count/1', method='wiki.jixing.myblog.controller.ArticleController.count', args=[1], result=Result{code=1, message='success', data=7}}
2022-06-30 18:06:09.428 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles/count/1', method='wiki.jixing.myblog.controller.ArticleController.count', args=[1], result=Result{code=1, message='success', data=9}}
2022-06-30 18:06:09.433 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags/count', method='wiki.jixing.myblog.controller.TagController.count', args=[], result=Result{code=1, message='success', data=15}}
2022-06-30 18:06:09.433 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 18:06:09.464 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-06-30 18:06:09.497 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/tags', method='wiki.jixing.myblog.controller.TagController.listAll', args=[], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=9, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-06-30 18:06:12.639 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comment', method='wiki.jixing.myblog.controller.PageController.comment', args=[], result=comment}
2022-06-30 18:06:12.813 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 18:06:12.848 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comments', method='wiki.jixing.myblog.controller.CommentController.listAll', args=[], result=Result{code=1, message='success', data=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))]}}
2022-06-30 18:06:16.132 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/archive', method='wiki.jixing.myblog.controller.PageController.archive', args=[], result=archive}
2022-06-30 18:06:16.268 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 18:06:16.336 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles', method='wiki.jixing.myblog.controller.ArticleController.list', args=[null, null, 1], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=9, size=9, startRow=0, endRow=8, total=9, pages=1, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=27, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)]), Article(id=4, title=E - Shiritori (字符串Hash - 拓扑排序 - 博弈), content=[题目链接](https://atcoder.jp/contests/abc209/tasks/abc209_e)
![](https://pic.imgdb.cn/item/62b7f37a2f25919088c8b4a5.jpg)
![](https://pic.imgdb.cn/item/62b7f3ad2f25919088c8ed80.jpg)
![](https://pic.imgdb.cn/item/62b7f3ba2f25919088c8fdaa.jpg)
![](https://pic.imgdb.cn/item/62b7f3cf2f25919088c91788.jpg)
>1、走向必败态的为必胜态
>2、走向必胜态或者无法继续时为必败态
>3、其他情况为平局

>字符串首尾连边做成一个有向图，因为下一步的选择与上一步的字符串结尾字符有关，所以我们这里建立反图，让让尾指向首做有向图

```cpp
#include <bits/stdc++.h>
	using namespace std;
	#define mem(a, b) memset(a, b, sizeof(a))
	#define int long long int
	#define endl '\n'
	typedef pair<int, int> PII;
	const int mod = 998244353;
	const int inf = 0x3f3f3f3f;
	const int N = 1e6 + 7;

	int Head[N], Edge[N], Next[N], idx;
	void add(int a, int b) {
		idx++;
		Edge[idx] = b;
		Next[idx] = Head[a];
		Head[a] = idx;
	}

	int f(char a) {
		if (a >= 'a' && a <= 'z')
			return a - 'a' + 26;
		else
			return a - 'A';
	}

	int get(string s) { //字符串Hash
		return f(s[0]) * 52 * 52 + f(s[1]) * 52 + f(s[2]);
	}

	int E[N];
	int d[N];    //能走向的边的数量 可以理解为出度，因为反向建图，此处是入度，但实际上是出度
	int ans[N];  //记录该点状态
	signed main() {
		mem(Head, -1);
		int n;
		cin >> n;
		string s;
		for (int i = 1; i <= n; i++) {
			cin >> s;
			string f = s.substr(0, 3);
			string e = s.substr(s.size() - 3);  // 取前三个和后三个字符
			int a = get(f), b = get(e); //取Hash值
			E[i] = b;
			add(b, a);  //反向建图
			d[a]++;
		}
		queue<int> q;
		mem(ans, -1);  //既不是必败也不是必胜态，初始化为平局
		for (int i = 0; i < 52 * 52 * 52; i++) {
			if (d[i] == 0) {  //出度为0的点 也就是没有能继续往下走的边，此时为必败态
				ans[i] = 0;   //记录该点为必败态
				q.push(i);
			}
		}
		while (!q.empty()) {  //反向BFS，判断该点能否走到必败态，类似拓扑排序
			int t = q.front();
			q.pop();
			for (int i = Head[t]; ~i; i = Next[i]) {
				int e = Edge[i];
				if (ans[e] == -1) {
					d[e]--;             //能走向的边的数量减1，此处是t->e  但是因为反向建图，实际上是e->t
					if (ans[t] == 0) {  //如果该点走向必败态，那么下一个人必输，这个点就是必胜态
						ans[e] = 1;     //记录状态
						q.push(e);
					} else if (d[e] == 0) {  //如果没有边可以走,那该点为必败态
						ans[e] = 0;
						q.push(e);
					} //其他情况为平局
				}
			}
		}
		for (int i = 1; i <= n; i++) {
			if (ans[E[i]] == -1)
				cout << "Draw" << endl;
			else if (ans[E[i]] == 1)
				cout << "Aoki" << endl;
			else
				cout << "Takahashi" << endl;
		}
		return 0;
	}

	/*
	*
	*　　┏┓　　　┏┓+ +
	*　┏┛┻━━━┛┻┓ + +
	*　┃　　　　　　　┃
	*　┃　　　━　　　┃ ++ + + +
	*  ████━████+
	*  ◥██◤　◥██◤ +
	*　┃　　　┻　　　┃
	*　┃　　　　　　　┃ + +
	*　┗━┓　　　┏━┛
	*　　　┃　　　┃ + + + +Code is far away from 　
	*　　　┃　　　┃ + bug with the animal protecting
	*　　　┃　 　 ┗━━━┓ 神兽保佑,代码无bug　
	*　　　┃ 　　　　　　 ┣┓
	*　　  ┃ 　　　　　 　┏┛
	*　    ┗┓┓┏━┳┓┏┛ + + + +
	*　　　　┃┫┫　┃┫┫
	*　　　　┗┻┛　┗┻┛+ + + +
	*/
```

, summary=1、走向必败态的为必胜态
2、走向必胜态或者无法继续时为必败态
3、其他情况为平局

字符串首尾连边做成一个有向图，因为下一步的选择与上一步的字符串结尾字符有关，所以我们这里建立反图，让让尾指向首做有向图
, coverImg=/static/img/cover/5.jpg, status=1, views=18, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), tags=[Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3)]), Article(id=2, title=Spring Boot, content=##Spring Boot 框架
Spring框架是Java平台上的一种开源应用框架，提供具有控制反转特性的容器。尽管Spring框架自身对编程模型没有限制，但其在Java应用中的频繁使用让它备受青睐，以至于后来让它作为EJB（EnterpriseJavaBeans）模型的补充，甚至是替补。Spring框架为开发提供了一系列的解决方案，比如利用控制反转的核心特性，并通过依赖注入实现控制反转来实现管理对象生命周期容器化，利用面向切面编程进行声明式的事务管理，整合多种持久化技术管理数据访问，提供大量优秀的Web框架方便开发等等。Spring框架具有控制反转（IOC）特性，IOC旨在方便项目维护和测试，它提供了一种通过Java的反射机制对Java对象进行统一的配置和管理的方法。Spring框架利用容器管理对象的生命周期，容器可以通过扫描XML文件或类上特定Java注解来配置对象，开发者可以通过依赖查找或依赖注入来获得对象。Spring框架具有面向切面编程（AOP）框架，SpringAOP框架基于代理模式，同时运行时可配置；AOP框架主要针对模块之间的交叉关注点进行模块化。Spring框架的AOP框架仅提供基本的AOP特性，虽无法与AspectJ框架相比，但通过与AspectJ的集成，也可以满足基本需求。Spring框架下的事务管理、远程访问等功能均可以通过使用SpringAOP技术实现。Spring的事务管理框架为Java平台带来了一种抽象机制，使本地和全局事务以及嵌套事务能够与保存点一起工作，并且几乎可以在Java平台的任何环境中工作。Spring集成多种事务模板，系统可以通过事务模板、XML或Java注解进行事务配置，并且事务框架集成了消息传递和缓存等功能。Spring的数据访问框架解决了开发人员在应用程序中使用数据库时遇到的常见困难。它不仅对Java:JDBC、iBATS/MyBATIs、Hibernate、Java数据对象（JDO）、ApacheOJB和ApacheCayne等所有流行的数据访问框架中提供支持，同时还可以与Spring的事务管理一起使用，为数据访问提供了灵活的抽象。Spring框架最初是没有打算构建一个自己的WebMVC框架，其开发人员在开发过程中认为现有的StrutsWeb框架的呈现层和请求处理层之间以及请求处理层和模型之间的分离不够，于是创建了SpringMVC。, summary=Spring框架是Java平台上的一种开源应用框架，提供具有控制反转特性的容器。尽管Spring框架自身对编程模型没有限制，但其在Java应用中的频繁使用让它备受青睐，以至于后来让它作为EJB（EnterpriseJavaBeans）模型的补充，甚至是替补。Spring框架为开发提供了一系列的解决方案，比如利用控制反转的核心特性，并通过依赖注入实现控制反转来实现管, coverImg=https://pic.imgdb.cn/item/6279b94e0947543129f458e3.jpg, status=1, views=3, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=1, title=Markdown语言, content=## 主要内容
> #### Markdown*是什么*？
> #### *谁*创造了它？
> #### *为什么*要使用它？
> #### *怎么*使用？
> #### *谁*在用？
> #### 尝试一下
## 正文
### 1. Markdown*是什么*？
**Markdown**是一种轻量级**标记语言**，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。    
**Markdown**也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    

### 2. *谁*创造了它？
它由[**Aaron Swartz**](http://www.aaronsw.com/)和**John Gruber**共同设计，**Aaron Swartz**就是那位于去年（*2013年1月11日*）自杀,有着**开挂**一般人生经历的程序员。维基百科对他的[介绍](http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8)是：**软件工程师、作家、政治组织者、互联网活动家、维基百科人**。    

他有着足以让你跪拜的人生经历：    
+ **14岁**参与RSS 1.0规格标准的制订。     
+ **2004**年入读**斯坦福**，之后退学。   
+ **2005**年创建[Infogami](http://infogami.org/)，之后与[Reddit](http://www.reddit.com/)合并成为其合伙人。   
+ **2010**年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   
+ **2011**年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     
+ **2013**年1月自杀身亡。    

![Aaron Swartz](https://pic.imgdb.cn/item/62b7ebcd2f25919088bf1b21.jpg)

天才都有早逝的归途。

### 3. *为什么*要使用它？
+ 它是易读（看起来舒服）、易写（语法简单）、易更改**纯文本**。处处体现着**极简主义**的影子。
+ 兼容HTML，可以转换为HTML格式发布。
+ 跨平台使用。
+ 越来越多的网站支持Markdown。
+ 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）
+ 摆脱Word（我不是认真的）。

### 4. *怎么*使用？
如果不算**扩展**，Markdown的语法绝对**简单**到让你爱不释手。

Markdown语法主要分为如下几大部分：
**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\`**，**符号'`'**。

#### 4.1 标题
两种形式：  
1）使用`=`和`-`标记一级和二级标题。
> 一级标题   
> `=========`   
> 二级标题    
> `---------`
效果：
> 一级标题   
> =========   
> 二级标题
> ---------  
2）使用`#`，可表示1-6级标题。
> \# 一级标题   
> \## 二级标题   
> \### 三级标题   
> \#### 四级标题   
> \##### 五级标题   
> \###### 六级标题    
效果：
> # 一级标题   
> ## 二级标题   
> ### 三级标题   
> #### 四级标题   
> ##### 五级标题   
> ###### 六级标题
#### 4.2 段落
段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。

#### 4.3 区块引用
在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：
> \> 区块引用  
> \>> 嵌套引用  
效果：
> 区块引用  
>> 嵌套引用
#### 4.4 代码区块
代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    

普通段落：
void main()    
{    
    printf("Hello, Markdown.");    
}    

代码区块：

    void main()
    {
        printf("Hello, Markdown.");
    }

**注意**:需要和普通段落之间存在空行。

#### 4.5 强调
在强调内容两侧分别加上`*`或者`_`，如：
> \*斜体\*，\_斜体\_    
> \*\*粗体\*\*，\_\_粗体\_\_
效果：
> *斜体*，_斜体_    
> **粗体**，__粗体__
#### 4.6 列表
使用`·`、`+`、或`-`标记无序列表，如：
> \-（+\*） 第一项
> \-（+\*） 第二项
> \- （+\*）第三项
**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。

效果：
> + 第一项
> + 第二项
> + 第三项
有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：
> 1 . 第一项   
> 2 . 第二项    
> 3 . 第三项    
效果：
> 1. 第一项
> 2. 第二项
> 3. 第三项
#### 4.7 分割线
分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。

#### 4.8 链接
链接可以由两种形式生成：**行内式**和**参考式**。    
**行内式**：
> \[younghz的Markdown库\]\(https:://github.com/younghz/Markdown "Markdown"\)。
效果：
> [younghz的Markdown库](https:://github.com/younghz/Markdown "Markdown")。
**参考式**：
> \[younghz的Markdown库1\]\[1\]    
> \[younghz的Markdown库2\]\[2\]    
> \[1\]:https:://github.com/younghz/Markdown "Markdown"    
> \[2\]:https:://github.com/younghz/Markdown "Markdown"    
效果：
> [younghz的Markdown库1][1]    
> [younghz的Markdown库2][2]
[1]: https:://github.com/younghz/Markdown "Markdown"
[2]: https:://github.com/younghz/Markdown "Markdown"

**注意**：上述的`[1]:https:://github.com/younghz/Markdown "Markdown"`不出现在区块中。

#### 4.9 图片
添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。
#### 4.10 反斜杠`\`
相当于**反转义**作用。使符号成为普通符号。
#### 4.11 符号'`'
起到标记作用。如：
>\`ctrl+a\`

效果：
>`ctrl+a`    
#### 5. *谁*在用？
Markdown的使用者：
+ GitHub
+ 简书
+ Stack Overflow
+ Apollo
+ Moodle
+ Reddit
+ 等等

#### 6. 尝试一下
+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。
+ **在线**的dillinger.io评价也不错   
+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    
+ **Mac**下的Mou是国人贡献的，口碑很好。
+ **Linux**下的ReText不错。    

**当然，最终境界永远都是笔下是语法，心中格式化 :)。**

****
**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。
虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]
(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。
****
以上基本是所有traditonal markdown的语法。

### 其它：
列表的使用(非traditonal markdown)：

用`|`表示表格纵向边界，表头和表内容用`-`隔开，并可用`:`进行对齐设置，两边都有`:`则表示居中，若不加`:`则默认左对齐。

|代码库                              |链接                                |
|:------------------------------------:|------------------------------------|
|MarkDown                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|
|MarkDownCopy                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|, summary=Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。, coverImg=https://pic.imgdb.cn/item/62b7eade2f25919088be05f8.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1), tags=[Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1)])], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-06-30 18:06:17.359 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/category', method='wiki.jixing.myblog.controller.PageController.category', args=[], result=category}
2022-06-30 18:06:17.519 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='成功获取当前登录用户', data={id=1, avatar=https://pic.imgdb.cn/item/62b7e4e02f25919088b69a8d.jpg, type=1, username=admin}}}
2022-06-30 18:06:17.528 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-06-30 18:06:17.529 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@559888ed], result=Result{code=1, message='success', data=[{name=爬虫, value=1}, {name=大数据, value=1}, {name=算法, value=1}, {name=Web, value=1}, {name=前端, value=2}, {name=后端, value=2}, {name=语言, value=1}]}}
2022-06-30 18:08:23.781 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closing ...
2022-06-30 18:08:23.785 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closed
2022-07-01 15:58:14.487 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Neither @ContextConfiguration nor @ContextHierarchy found for test class [wiki.jixing.myblog.MyBlogApplicationTests], using SpringBootContextLoader
2022-07-01 15:58:14.496 [main] [INFO ] org.springframework.test.context.support.AbstractContextLoader -- Could not detect default resource locations for test class [wiki.jixing.myblog.MyBlogApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2022-07-01 15:58:14.497 [main] [INFO ] org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [wiki.jixing.myblog.MyBlogApplicationTests]: MyBlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2022-07-01 15:58:14.609 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration wiki.jixing.myblog.MyBlogApplication for test class wiki.jixing.myblog.MyBlogApplicationTests
2022-07-01 15:58:14.729 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2022-07-01 15:58:14.754 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@4758820d, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@74eb909f, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@28ec166e, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@2eee3069, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@2da59753, org.springframework.test.context.support.DirtiesContextTestExecutionListener@5629510, org.springframework.test.context.transaction.TransactionalTestExecutionListener@4df5bcb4, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@12c7a01b, org.springframework.test.context.event.EventPublishingTestExecutionListener@13d9b21f, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@2826f61, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@62727399, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@4d9ac0b4, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@130dca52, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@2654635, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@737a135b]
2022-07-01 15:58:15.299 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- Starting MyBlogApplicationTests using Java 1.8.0_331 on DESKTOP-JIXING with PID 27624 (started by jixing in E:\IDEA_workspace\MyBlog)
2022-07-01 15:58:15.304 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- No active profile set, falling back to 1 default profile: "default"
2022-07-01 15:58:17.125 [main] [INFO ] com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure -- Init DruidDataSource
2022-07-01 15:58:17.348 [main] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} inited
2022-07-01 15:58:18.703 [main] [INFO ] org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping -- Adding welcome page template: index
2022-07-01 15:58:36.166 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- Started MyBlogApplicationTests in 21.319 seconds (JVM running for 22.971)
2022-07-01 15:58:36.493 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closing ...
2022-07-01 15:58:36.496 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closed
2022-07-01 15:58:47.543 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- Starting MyBlogApplication using Java 1.8.0_331 on DESKTOP-JIXING with PID 18316 (E:\IDEA_workspace\MyBlog\target\classes started by jixing in E:\IDEA_workspace\MyBlog)
2022-07-01 15:58:47.550 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- No active profile set, falling back to 1 default profile: "default"
2022-07-01 15:58:48.825 [main] [INFO ] org.springframework.boot.web.embedded.tomcat.TomcatWebServer -- Tomcat initialized with port(s): 8080 (http)
2022-07-01 15:58:48.835 [main] [INFO ] org.apache.coyote.http11.Http11NioProtocol -- Initializing ProtocolHandler ["http-nio-8080"]
2022-07-01 15:58:48.836 [main] [INFO ] org.apache.catalina.core.StandardService -- Starting service [Tomcat]
2022-07-01 15:58:48.836 [main] [INFO ] org.apache.catalina.core.StandardEngine -- Starting Servlet engine: [Apache Tomcat/9.0.64]
2022-07-01 15:58:48.910 [main] [INFO ] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -- Initializing Spring embedded WebApplicationContext
2022-07-01 15:58:48.910 [main] [INFO ] org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext -- Root WebApplicationContext: initialization completed in 1323 ms
2022-07-01 15:58:49.064 [main] [INFO ] com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure -- Init DruidDataSource
2022-07-01 15:58:49.158 [main] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} inited
2022-07-01 15:58:49.920 [main] [INFO ] org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping -- Adding welcome page template: index
2022-07-01 15:59:06.268 [main] [INFO ] org.apache.coyote.http11.Http11NioProtocol -- Starting ProtocolHandler ["http-nio-8080"]
2022-07-01 15:59:06.285 [main] [INFO ] org.springframework.boot.web.embedded.tomcat.TomcatWebServer -- Tomcat started on port(s): 8080 (http) with context path ''
2022-07-01 15:59:06.294 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- Started MyBlogApplication in 19.137 seconds (JVM running for 23.69)
2022-07-01 15:59:06.424 [http-nio-8080-exec-1] [INFO ] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -- Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-07-01 15:59:06.424 [http-nio-8080-exec-1] [INFO ] org.springframework.web.servlet.DispatcherServlet -- Initializing Servlet 'dispatcherServlet'
2022-07-01 15:59:06.425 [http-nio-8080-exec-1] [INFO ] org.springframework.web.servlet.DispatcherServlet -- Completed initialization in 1 ms
2022-07-01 15:59:06.456 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-07-01 15:59:06.864 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=0, message='获取失败', data=null}}
2022-07-01 15:59:07.185 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='success', data=15}}
2022-07-01 15:59:07.256 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-07-01 15:59:07.261 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='success', data=7}}
2022-07-01 15:59:07.291 [http-nio-8080-exec-10] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='success', data=9}}
2022-07-01 15:59:07.387 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=9, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=28, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-07-01 15:59:11.009 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-07-01 15:59:11.198 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/count', method='wiki.jixing.myblog.controller.CategoryController.count', args=[], result=Result{code=1, message='success', data=9}}
2022-07-01 15:59:11.202 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=0, message='获取失败', data=null}}
2022-07-01 15:59:11.203 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='success', data=15}}
2022-07-01 15:59:11.203 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='success', data=7}}
2022-07-01 15:59:11.227 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-07-01 15:59:11.255 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@5a735ccb], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=9, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=28, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-07-01 15:59:17.188 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closing ...
2022-07-01 15:59:17.191 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closed
2022-07-01 15:59:24.327 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Neither @ContextConfiguration nor @ContextHierarchy found for test class [wiki.jixing.myblog.MyBlogApplicationTests], using SpringBootContextLoader
2022-07-01 15:59:24.334 [main] [INFO ] org.springframework.test.context.support.AbstractContextLoader -- Could not detect default resource locations for test class [wiki.jixing.myblog.MyBlogApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2022-07-01 15:59:24.334 [main] [INFO ] org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [wiki.jixing.myblog.MyBlogApplicationTests]: MyBlogApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2022-07-01 15:59:24.406 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration wiki.jixing.myblog.MyBlogApplication for test class wiki.jixing.myblog.MyBlogApplicationTests
2022-07-01 15:59:24.485 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2022-07-01 15:59:24.499 [main] [INFO ] org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@28ec166e, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@2eee3069, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@2da59753, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@5629510, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4df5bcb4, org.springframework.test.context.support.DirtiesContextTestExecutionListener@12c7a01b, org.springframework.test.context.transaction.TransactionalTestExecutionListener@13d9b21f, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@2826f61, org.springframework.test.context.event.EventPublishingTestExecutionListener@62727399, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@4d9ac0b4, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@130dca52, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@2654635, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@737a135b, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@687ef2e0, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@15dcfae7]
2022-07-01 15:59:24.831 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- Starting MyBlogApplicationTests using Java 1.8.0_331 on DESKTOP-JIXING with PID 5756 (started by jixing in E:\IDEA_workspace\MyBlog)
2022-07-01 15:59:24.837 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- No active profile set, falling back to 1 default profile: "default"
2022-07-01 15:59:26.112 [main] [INFO ] com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure -- Init DruidDataSource
2022-07-01 15:59:26.268 [main] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} inited
2022-07-01 15:59:27.152 [main] [INFO ] org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping -- Adding welcome page template: index
2022-07-01 15:59:44.369 [main] [INFO ] wiki.jixing.myblog.MyBlogApplicationTests -- Started MyBlogApplicationTests in 19.801 seconds (JVM running for 20.873)
2022-07-01 15:59:44.623 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closing ...
2022-07-01 15:59:44.624 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closed
2022-07-01 15:59:50.928 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- Starting MyBlogApplication using Java 1.8.0_331 on DESKTOP-JIXING with PID 2852 (E:\IDEA_workspace\MyBlog\target\classes started by jixing in E:\IDEA_workspace\MyBlog)
2022-07-01 15:59:50.937 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- No active profile set, falling back to 1 default profile: "default"
2022-07-01 15:59:52.322 [main] [INFO ] org.springframework.boot.web.embedded.tomcat.TomcatWebServer -- Tomcat initialized with port(s): 8080 (http)
2022-07-01 15:59:52.332 [main] [INFO ] org.apache.coyote.http11.Http11NioProtocol -- Initializing ProtocolHandler ["http-nio-8080"]
2022-07-01 15:59:52.332 [main] [INFO ] org.apache.catalina.core.StandardService -- Starting service [Tomcat]
2022-07-01 15:59:52.332 [main] [INFO ] org.apache.catalina.core.StandardEngine -- Starting Servlet engine: [Apache Tomcat/9.0.64]
2022-07-01 15:59:52.395 [main] [INFO ] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -- Initializing Spring embedded WebApplicationContext
2022-07-01 15:59:52.395 [main] [INFO ] org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext -- Root WebApplicationContext: initialization completed in 1404 ms
2022-07-01 15:59:52.532 [main] [INFO ] com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure -- Init DruidDataSource
2022-07-01 15:59:52.608 [main] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} inited
2022-07-01 15:59:53.158 [main] [INFO ] org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping -- Adding welcome page template: index
2022-07-01 16:00:13.629 [main] [INFO ] org.apache.coyote.http11.Http11NioProtocol -- Starting ProtocolHandler ["http-nio-8080"]
2022-07-01 16:00:13.645 [main] [INFO ] org.springframework.boot.web.embedded.tomcat.TomcatWebServer -- Tomcat started on port(s): 8080 (http) with context path ''
2022-07-01 16:00:13.654 [main] [INFO ] wiki.jixing.myblog.MyBlogApplication -- Started MyBlogApplication in 23.134 seconds (JVM running for 26.937)
2022-07-01 16:00:15.717 [http-nio-8080-exec-1] [INFO ] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] -- Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-07-01 16:00:15.717 [http-nio-8080-exec-1] [INFO ] org.springframework.web.servlet.DispatcherServlet -- Initializing Servlet 'dispatcherServlet'
2022-07-01 16:00:15.718 [http-nio-8080-exec-1] [INFO ] org.springframework.web.servlet.DispatcherServlet -- Completed initialization in 1 ms
2022-07-01 16:00:15.753 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/', method='wiki.jixing.myblog.controller.PageController.index', args=[], result=index}
2022-07-01 16:00:16.142 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=0, message='获取失败', data=null}}
2022-07-01 16:00:16.327 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=1, message='success', data=7}}
2022-07-01 16:00:16.327 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=1, message='success', data=7}}
2022-07-01 16:00:16.339 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=1, message='success', data=9}}
2022-07-01 16:00:16.359 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=1, message='查询成功', data=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3), Tag(id=9, name=Hadoop, createTime=2022-06-26T13:25:23, updateTime=2022-06-26T13:25:23, articleCount=1), Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1), Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]}}
2022-07-01 16:00:16.452 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=5, size=5, startRow=1, endRow=5, total=9, pages=2, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=28, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)])], prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]}}}
2022-07-01 16:00:17.390 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/category', method='wiki.jixing.myblog.controller.PageController.category', args=[], result=category}
2022-07-01 16:00:17.567 [http-nio-8080-exec-5] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/statistics', method='wiki.jixing.myblog.controller.CategoryController.statistics', args=[], result=Result{code=0, message='获取失败', data=null}}
2022-07-01 16:00:17.576 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/statistics', method='wiki.jixing.myblog.controller.CategoryController.statistics', args=[], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-07-01 16:00:17.582 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/categories/statistics', method='wiki.jixing.myblog.controller.CategoryController.statistics', args=[], result=Result{code=1, message='success', data=[{name=爬虫, value=1}, {name=大数据, value=1}, {name=算法, value=1}, {name=Web, value=1}, {name=前端, value=2}, {name=后端, value=2}, {name=语言, value=1}]}}
2022-07-01 16:00:17.914 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/comment', method='wiki.jixing.myblog.controller.PageController.comment', args=[], result=comment}
2022-07-01 16:00:18.043 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=0, message='获取失败', data=null}}
2022-07-01 16:00:18.263 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=1, message='success', data=[Comment(id=9, content=heihei, createTime=2022-06-30T09:08:57, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=4, content=哈哈哈哈哈, createTime=2022-06-26T14:36:26, user=User(id=2, username=tourist, email=125***@163.com, password=9c0763361a96027a33f2f28667033686, type=1, avatar=null, createTime=2022-06-26T14:32:52, updateTime=2022-06-30T14:25:08)), Comment(id=3, content=王姝真是 善解人意，温柔大方，冰清玉洁，漂亮可爱，魅力四射，花见花开，人见人爱，温柔可爱，善良正直！！！！！！！！！！！！！！！！！, createTime=2022-06-26T14:35:33, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17)), Comment(id=2, content=王姝是大美女，王姝最好看了！！！！！！, createTime=2022-06-26T14:35:14, user=User(id=3, username=wangshu, email=118*******@qq.com, password=cb6b6b4b6ab00bc730fd3cb366e8bcca, type=1, avatar=null, createTime=2022-06-26T14:33:44, updateTime=2022-06-30T09:12:17))]}}
2022-07-01 16:00:19.804 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/archive', method='wiki.jixing.myblog.controller.PageController.archive', args=[], result=archive}
2022-07-01 16:00:19.938 [http-nio-8080-exec-7] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=0, message='获取失败', data=null}}
2022-07-01 16:00:20.008 [http-nio-8080-exec-1] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/articles', method='wiki.jixing.myblog.controller.ArticleController.list', args=[null, null, 1], result=Result{code=1, message='success', data=PageInfo{pageNum=1, pageSize=9, size=9, startRow=0, endRow=8, total=9, pages=1, list=[Article(id=11, title=赛氪网竞赛信息爬取, content=# 第1章 实验步骤及分析

## 1.1实验内容

基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理

## 1.2观察网页结构，制定爬取逻辑

用Google浏览器打开赛氪网的网站，观察其页面布局，发现最后有分页条且竞赛的详细信息并没有直接展示在列表中，爬取的数据没有在同一页面，所以需要深度爬取。

## 1.3创建Scrapy项目

```bash
scrapy startproject saikr
cd saikr
scrapy genspider -t crawl sk
```

## 1.4观察赛氪网每一页的URL变化规律，配置链接提取器

```py
# https://www.saikr.com/vs?page=>???
Rule(LinkExtractor(allow=r'page=\\d+\$'), callback='parse_page', follow=True)
```

## 1.5获取详情页网址的Xpath语句，完善parse_page回调函数

```py
def parse_page(self, response):
    li_list = response.xpath("//ul[@class='list']/li")
    for li in li_list:
        href = li.xpath("./div/h3/a/@href").extract_first()
        yield scrapy.Request(url=href, callback=self.parse_contest)
```

## 1.6确定需要爬取的信息，编写items.py文件，定义数据结构

```py
name = scrapy.Field()
organizers = scrapy.Field()
register_time = scrapy.Field()
contest_time = scrapy.Field()
types = scrapy.Field()
url = scrapy.Field()
```

## 1.7获取指定信息的Xpath语句，完善parse_contest回调函数

```py
def parse_contest(self, response):
    name = response.xpath("//div[@id='eventDetailBox']/h1/text()")
    extract_first()
    organizer_list = response.xpath("//h3[contains(text(),'主办方')]/./..//ul/li")
    organizers = ''
    for i in range(len(organizer_list)):
        o = organizer_list[i].xpath("./div/text()").extract_first().strip()
        if i < len(organizer_list) - 1:
            organizers += o + ', '
        else:
            organizers += o
    register_time = response.xpath("//h3[contains(text(),'报名时间')]/./..//ul/li/div/text()").extract_first()
    contest_time = response.xpath("//h3[contains(text(),'比赛时间')]/./..//ul/li/div/text()").extract_first()
    type_list = response.xpath("//h3[contains(text(),'竞赛类别')]/.././/ul/li/div/span")
    types = ''
    for i in range(len(type_list)):
        t = type_list[i].xpath("./text()").extract_first().strip()
        replace('&', ', ')
        self.x_type.extend(t.split(','))
        if i < len(type_list) - 1:
            types += t + ', '
        else:
            types += t
    item = SaikrItem()
    item['name'] = data_format(name)
    item['organizers'] = data_format(organizers)
    item['register_time'] = data_format(register_time)
    item['contest_time'] = data_format(contest_time)
    item['types'] = data_format(types)
    item['url'] = response.url
    yield item
```

## 1.8创建saikr数据库，根据需要爬取的数据创建数据库表

```bash
create database saikr;
use saikr;
```

```sql
create table contest
(
    id            int auto_increment,
    name          varchar(128),
    organizers    varchar(128),
    register_time varchar(128),
    contest_time  varchar(128),
    types         varchar(256),
    url           varchar(128),
    primary key (id)
);
```

## 1.9编写pipelines.py文件，完成本地化存储及数据可视化

```py
class SaikrPipeline:
    def __init__(self):
        self.connect = pymysql.connect(host='localhost', port=3306, user='***', password='***', db='saikr')
        self.cursor = self.connect.cursor()
        self.cursor.execute('truncate table contest')
    def process_item(self, item, spider):
        name = item['name']
        organizers = item['organizers']
        register_time = item['register_time']
        contest_time = item['contest_time']
        types = item['types']
        url = item['url']
        print('正在保存 ' + name + ' 的信息!')
        sql = 'insert into contest(name, organizers, register_time, contest_time, types, url) values (%s,%s,%s,%s,%s,%s)'
        self.cursor.execute(sql, (name, organizers, register_time, contest_time, types, url))
        self.connect.commit()
        print(name + ' 的信息保存完成!')
    def close_spider(self, spider):
        x = list(set(SkSpider.x_type))
        y = []
        sql = 'select * from contest where types like %s'
        for i in x:
            self.cursor.execute(sql, '%' + i + '%')
            count = self.cursor.rowcount
            y.append(count)
        print("正在生成可视化图表!!!")
        matplotlib.rcParams['font.family'] = 'SimHei'
        plt.figure('赛氪网竞赛分类统计', figsize=(20, 10))
        plt.title('赛氪网竞赛分类统计')
        plt.xlabel('竞赛数量')
        plt.ylabel('分类名称')
        plt.barh(x, y)
        plt.savefig('./赛氪网竞赛分类统计.jpg')
        plt.show()
        print('完成!!!')
        self.cursor.close()
        self.connect.close()
```

# 第2章 运行结果
## 2.1数据可视化
![](https://pic.imgdb.cn/item/62a1dde70947543129d66ac9.png)

图 2-1竞赛分类统计截图
## 2.2持久化存储
![](https://pic.imgdb.cn/item/62a1ddfc0947543129d687c5.png)

图 2-2 数据库数据截图, summary=基于Scrapy框架的赛氪网竞赛信息爬取以及利用MySQL数据库进行本地化存储，并将竞赛分类统计，进行可视化处理, coverImg=/static/img/cover/6.jpg, status=1, views=28, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), tags=[Tag(id=18, name=Scrapy, createTime=2022-06-26T21:15:46, updateTime=2022-06-26T21:15:46, articleCount=2), Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2)]), Article(id=10, title=Spark, content=## Spark的四大特性
### Simple（易用性）
>Spark 提供了丰富的高级运算操作，支持丰富的算子，并支持 Java、Python、Scala、R、SQL 等语言的 API，使用户可以快速构建不同的应用。

>开发人员只需调用 Spark 封装好的 API 来实现即可，无需关注 Spark 的底层架构。

### Fast(速度快)
>Spark 将处理的每个任务都构造成一个DAG（Directed Acyclic Graph, 有向无环图）来执行，实现原理是基于RDD（Resilient Distributed Dataset, 弹性分布式数据集）在内存中对数据进行迭代计算，以实现批量和流式数据的高性能快速计算处理。

Spark比MR速度快的原因
>基于内存
mapreduce任务后期再计算的时候，每一个job的输出结果会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候就需要进行大量的磁盘io操作。性能就比较低。
spark任务后期再计算的时候，job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就直接从内存中获取得到，避免了磁盘io操作，性能比较高
对于spark程序和mapreduce程序都会产生shuffle阶段，在shuffle阶段中它们产生的数据都会落地到磁盘。
进程与线程
mapreduce任务以进程的方式运行在yarn集群中，比如程序中有100个MapTask，一个task就需要一个进程，这些task要运行就需要开启100个进程。
spark任务以线程的方式运行在进程中，比如程序中有100个MapTask，后期一个task就对应一个线程，这里就不再是进程，这些task需要运行，这里可以极端一点：只需要开启1个进程，在这个进程中启动100个线程就可以了。
进程中可以启动很多个线程，而开启一个进程与开启一个线程需要的时间和调度代价是不一样。 开启一个进程需要的时间远远大于开启一个线程。## Scalable（可融合性）

### Unified（通用性）
>大数据处理的传统方案需要维护多个平台，比如，离线任务是放在 Hadoop MapRedue 上运行，实时流计算任务是放在 Storm 上运行。

>而Spark 提供了一站式的统一解决方案，可用于批处理、交互式查询（Spark SQL）、实时流处理（Spark Streaming）、机器学习（Spark MLlib）和图计算（GraphX）等。这些不同类型的处理都可以在同一个应用中无缝组合使用。

### Scalable(兼容性)
>Spark 可以非常方便地与其他的开源产品进行融合。比如：Spark 可以使用 Hadoop 的 YARN 和 Apache Mesos 作为它的资源管理和调度器；可以处理所有 Hadoop 支持的数据，包括 HDFS、HBase 和 Cassandra 等。, summary=Spark 是 UC Berkeley AMP Lab 开源的通用分布式并行计算框架。
Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。, coverImg=https://pic.imgdb.cn/item/62b7fc4d2f25919088d4949f.jpg, status=1, views=13, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), tags=[Tag(id=8, name=Spark, createTime=2022-06-26T13:25:16, updateTime=2022-06-26T13:25:16, articleCount=1), Tag(id=1, name=算法, createTime=2022-06-26T12:56:04, updateTime=2022-06-26T12:56:04, articleCount=1)]), Article(id=8, title=React, content=# [React](https://reactjs.org/) &middot; [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/react/blob/main/LICENSE) [![npm version](https://img.shields.io/npm/v/react.svg?style=flat)](https://www.npmjs.com/package/react) [![CircleCI Status](https://circleci.com/gh/facebook/react.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/facebook/react) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request)

React is a JavaScript library for building user interfaces.

* **Declarative:** React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.
* **Component-Based:** Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.
* **Learn Once, Write Anywhere:** We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using [React Native](https://reactnative.dev/).

[Learn how to use React in your project](https://reactjs.org/docs/getting-started.html).

## Installation

React has been designed for gradual adoption from the start, and **you can use as little or as much React as you need**:

* Use [Online Playgrounds](https://reactjs.org/docs/getting-started.html#online-playgrounds) to get a taste of React.
* [Add React to a Website](https://reactjs.org/docs/add-react-to-a-website.html) as a `<script>` tag in one minute.
* [Create a New React App](https://reactjs.org/docs/create-a-new-react-app.html) if you're looking for a powerful JavaScript toolchain.

You can use React as a `<script>` tag from a [CDN](https://reactjs.org/docs/cdn-links.html), or as a `react` package on [npm](https://www.npmjs.com/package/react).

## Documentation

You can find the React documentation [on the website](https://reactjs.org/).  

Check out the [Getting Started](https://reactjs.org/docs/getting-started.html) page for a quick overview.

The documentation is divided into several sections:

* [Tutorial](https://reactjs.org/tutorial/tutorial.html)
* [Main Concepts](https://reactjs.org/docs/hello-world.html)
* [Advanced Guides](https://reactjs.org/docs/jsx-in-depth.html)
* [API Reference](https://reactjs.org/docs/react-api.html)
* [Where to Get Support](https://reactjs.org/community/support.html)
* [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

You can improve it by sending pull requests to [this repository](https://github.com/reactjs/reactjs.org).

## Examples

We have several examples [on the website](https://reactjs.org/). Here is the first one to get you started:

```jsx
import { createRoot } from 'react-dom/client';
function HelloMessage({ name }) {
  return <div>Hello {name}</div>;
}
const root = createRoot(document.getElementById('container'));
root.render(<HelloMessage name="Taylor" />);
```

This example will render "Hello Taylor" into a container on the page.

You'll notice that we used an HTML-like syntax; [we call it JSX](https://reactjs.org/docs/introducing-jsx.html). JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you're using React as a `<script>` tag, read [this section](https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx) on integrating JSX; otherwise, the [recommended JavaScript toolchains](https://reactjs.org/docs/create-a-new-react-app.html) handle it automatically.

## Contributing

The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.

### [Code of Conduct](https://code.fb.com/codeofconduct)

Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.

### [Contributing Guide](https://reactjs.org/docs/how-to-contribute.html)

Read our [contributing guide](https://reactjs.org/docs/how-to-contribute.html) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.

### Good First Issues

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/facebook/react/labels/good%20first%20issue) that contain bugs that have a relatively limited scope. This is a great place to get started.

### License

React is [MIT licensed](./LICENSE)., summary=React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目，该公司对市场上所有 JavaScript MVC框架都不满意，决定自行开发一套，用于架设Instagram的网站。于2013年5月开源。, coverImg=https://pic.imgdb.cn/item/62b7fa2e2f25919088d1f401.jpg, status=1, views=9, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3), Tag(id=6, name=React, createTime=2022-06-26T13:25:07, updateTime=2022-06-26T13:25:07, articleCount=1)]), Article(id=7, title=Vue, content=<p align="center"><a href="https://vuejs.org" target="_blank" rel="noopener noreferrer"><img width="100" src="https://vuejs.org/images/logo.png" alt="Vue logo"></a></p>

<p align="center">
  <a href="https://circleci.com/gh/vuejs/vue/tree/dev"><img src="https://img.shields.io/circleci/project/github/vuejs/vue/dev.svg?sanitize=true" alt="Build Status"></a>
  <a href="https://codecov.io/github/vuejs/vue?branch=dev"><img src="https://img.shields.io/codecov/c/github/vuejs/vue/dev.svg?sanitize=true" alt="Coverage Status"></a>
  <a href="https://npmcharts.com/compare/vue?minimal=true"><img src="https://img.shields.io/npm/dm/vue.svg?sanitize=true" alt="Downloads"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/v/vue.svg?sanitize=true" alt="Version"></a>
  <a href="https://www.npmjs.com/package/vue"><img src="https://img.shields.io/npm/l/vue.svg?sanitize=true" alt="License"></a>
  <a href="https://chat.vuejs.org/"><img src="https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true" alt="Chat"></a>
</p>

## This repo is for Vue 2

You are looking at the repository for Vue 2. The repo for Vue 3 is [vuejs/core](https://github.com/vuejs/core).

## Sponsors

Vue.js is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome [backers](https://github.com/vuejs/core/blob/main/BACKERS.md). If you'd like to join them, please consider [ sponsor Vue's development](https://vuejs.org/sponsor/).

<p align="center">
  <a target="_blank" href="https://vuejs.org/sponsor/">
    <img alt="sponsors" src="https://sponsors.vuejs.org/sponsors.svg">
  </a>
</p>

---

## Introduction

Vue (pronounced `/vjuː/`, like view) is a **progressive framework** for building user interfaces. It is designed from the ground up to be incrementally adoptable, and can easily scale between a library and a framework depending on different use cases. It consists of an approachable core library that focuses on the view layer only, and an ecosystem of supporting libraries that helps you tackle complexity in large Single-Page Applications.

#### Browser Compatibility

Vue.js supports all browsers that are [ES5-compliant](https://kangax.github.io/compat-table/es5/) (IE8 and below are not supported).

## Ecosystem

| Project               | Status                                                       | Description                                             |
| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| [vue-router]          | [![vue-router-status]][vue-router-package]                   | Single-page application routing                         |
| [vuex]                | [![vuex-status]][vuex-package]                               | Large-scale state management                            |
| [vue-cli]             | [![vue-cli-status]][vue-cli-package]                         | Project scaffolding                                     |
| [vue-loader]          | [![vue-loader-status]][vue-loader-package]                   | Single File Component (`*.vue` file) loader for webpack |
| [vue-server-renderer] | [![vue-server-renderer-status]][vue-server-renderer-package] | Server-side rendering support                           |
| [vue-class-component] | [![vue-class-component-status]][vue-class-component-package] | TypeScript decorator for a class-based API              |
| [vue-rx]              | [![vue-rx-status]][vue-rx-package]                           | RxJS integration                                        |
| [vue-devtools]        | [![vue-devtools-status]][vue-devtools-package]               | Browser DevTools extension                              |

[vue-router]: https://github.com/vuejs/vue-router
[vuex]: https://github.com/vuejs/vuex
[vue-cli]: https://github.com/vuejs/vue-cli
[vue-loader]: https://github.com/vuejs/vue-loader
[vue-server-renderer]: https://github.com/vuejs/vue/tree/dev/packages/vue-server-renderer
[vue-class-component]: https://github.com/vuejs/vue-class-component
[vue-rx]: https://github.com/vuejs/vue-rx
[vue-devtools]: https://github.com/vuejs/vue-devtools
[vue-router-status]: https://img.shields.io/npm/v/vue-router.svg
[vuex-status]: https://img.shields.io/npm/v/vuex.svg
[vue-cli-status]: https://img.shields.io/npm/v/@vue/cli.svg
[vue-loader-status]: https://img.shields.io/npm/v/vue-loader.svg
[vue-server-renderer-status]: https://img.shields.io/npm/v/vue-server-renderer.svg
[vue-class-component-status]: https://img.shields.io/npm/v/vue-class-component.svg
[vue-rx-status]: https://img.shields.io/npm/v/vue-rx.svg
[vue-devtools-status]: https://img.shields.io/chrome-web-store/v/nhdogjmejiglipccpnnnanhbledajbpd.svg
[vue-router-package]: https://npmjs.com/package/vue-router
[vuex-package]: https://npmjs.com/package/vuex
[vue-cli-package]: https://npmjs.com/package/@vue/cli
[vue-loader-package]: https://npmjs.com/package/vue-loader
[vue-server-renderer-package]: https://npmjs.com/package/vue-server-renderer
[vue-class-component-package]: https://npmjs.com/package/vue-class-component
[vue-rx-package]: https://npmjs.com/package/vue-rx
[vue-devtools-package]: https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd

## Documentation

To check out [live examples](https://vuejs.org/v2/examples/) and docs, visit [vuejs.org](https://vuejs.org).

## Questions

For questions and support please use [the official forum](https://forum.vuejs.org) or [community chat](https://chat.vuejs.org/). The issue list of this repo is **exclusively** for bug reports and feature requests.

## Issues

Please make sure to read the [Issue Reporting Checklist](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#issue-reporting-guidelines) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog

Detailed changes for each release are documented in the [release notes](https://github.com/vuejs/vue/releases).

## Stay In Touch

- [Twitter](https://twitter.com/vuejs)
- [Blog](https://medium.com/the-vue-point)
- [Job Board](https://vuejobs.com/?ref=vuejs)

## Contribution

Please make sure to read the [Contributing Guide](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md) before making a pull request. If you have a Vue-related project/component/tool, add it with a pull request to [this curated list](https://github.com/vuejs/awesome-vue)!

Thank you to all the people who already contributed to Vue!

<a href="https://github.com/vuejs/vue/graphs/contributors"><img src="https://opencollective.com/vuejs/contributors.svg?width=890" /></a>

## License

[MIT](https://opensource.org/licenses/MIT)

Copyright (c) 2013-present, Yuxi (Evan) You, summary=Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。, coverImg=https://pic.imgdb.cn/item/6279b98d0947543129f4d32f.jpg, status=1, views=12, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), tags=[Tag(id=17, name=JavaScript, createTime=2022-06-26T13:45:46, updateTime=2022-06-26T13:45:46, articleCount=7), Tag(id=13, name=Vue, createTime=2022-06-26T13:25:42, updateTime=2022-06-26T13:25:42, articleCount=3), Tag(id=7, name=HTML, createTime=2022-06-26T13:25:11, updateTime=2022-06-26T13:25:11, articleCount=3)]), Article(id=6, title=Java （计算机编程语言）, content=1.简单性
Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持goto语句，代之以提供break和continue语句以及异常处理。Java还剔除了C++的操作符过载（overload）和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。
2.面向对象
Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。
Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类（java.awt包），这里awt是抽象窗口工具集（abstract windowing toolkit）的缩写，处理输入输出的类（java.io包）和支持网络功能的类（java.net包）。
3.分布性
Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器。
网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。
4.编译和解释性
Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。
在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。
5.稳健性
Java
Java
Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。
Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的隐式声明。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。
可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。
异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。
6.安全性
Java的存储分配模型是它防御恶意代码的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。
Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。
7.可移植性
Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。
Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。
8.高性能
Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。
Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。
9.多线程性
Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。
Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词synchronized，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。
10.动态性
Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。, summary=Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程, coverImg=https://pic.imgdb.cn/item/62b7f7972f25919088ce97f4.jpg, status=1, views=4, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=5, title=Django, content=Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 [2]  。Django 项目源自一个在线新闻 Web 站点，于 2005 年以开源的形式被释放出来。Django 框架的核心组件有：
1、用于创建模型的对象关系映射；
2、为最终用户设计较好的管理界面；
3、URL 设计；
4、设计者友好的模板语言；
5、缓存系统。
Django(发音：[`dʒæŋɡəʊ]) 是用python语言写的开源web开发框架(open source web framework)，它鼓励快速开发,并遵循MVC设计。Django遵守BSD版权，初次发布于2005年7月, 并于2008年9月发布了第一个正式版本1.0 。
Django 根据比利时的爵士音乐家Django Reinhardt命名，他是一个吉普赛人，主要以演奏吉它为主，还演奏过小提琴等。
由于Django在近年来的迅速发展，应用越来越广泛，被著名IT开发杂志SD Times评选为2013 SD Times 100，位列“API、库和框架”分类第6位，被认为是该领域的佼佼者, summary=Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。2019年12月2日，Django 3. 0发布, coverImg=https://pic.imgdb.cn/item/62b7f6222f25919088cc5fce.jpg, status=1, views=7, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=11, name=Python, createTime=2022-06-26T13:25:31, updateTime=2022-06-26T13:25:31, articleCount=2), Tag(id=5, name=Django, createTime=2022-06-26T13:25:02, updateTime=2022-06-26T13:25:02, articleCount=1)]), Article(id=4, title=E - Shiritori (字符串Hash - 拓扑排序 - 博弈), content=[题目链接](https://atcoder.jp/contests/abc209/tasks/abc209_e)
![](https://pic.imgdb.cn/item/62b7f37a2f25919088c8b4a5.jpg)
![](https://pic.imgdb.cn/item/62b7f3ad2f25919088c8ed80.jpg)
![](https://pic.imgdb.cn/item/62b7f3ba2f25919088c8fdaa.jpg)
![](https://pic.imgdb.cn/item/62b7f3cf2f25919088c91788.jpg)
>1、走向必败态的为必胜态
>2、走向必胜态或者无法继续时为必败态
>3、其他情况为平局

>字符串首尾连边做成一个有向图，因为下一步的选择与上一步的字符串结尾字符有关，所以我们这里建立反图，让让尾指向首做有向图

```cpp
#include <bits/stdc++.h>
	using namespace std;
	#define mem(a, b) memset(a, b, sizeof(a))
	#define int long long int
	#define endl '\n'
	typedef pair<int, int> PII;
	const int mod = 998244353;
	const int inf = 0x3f3f3f3f;
	const int N = 1e6 + 7;

	int Head[N], Edge[N], Next[N], idx;
	void add(int a, int b) {
		idx++;
		Edge[idx] = b;
		Next[idx] = Head[a];
		Head[a] = idx;
	}

	int f(char a) {
		if (a >= 'a' && a <= 'z')
			return a - 'a' + 26;
		else
			return a - 'A';
	}

	int get(string s) { //字符串Hash
		return f(s[0]) * 52 * 52 + f(s[1]) * 52 + f(s[2]);
	}

	int E[N];
	int d[N];    //能走向的边的数量 可以理解为出度，因为反向建图，此处是入度，但实际上是出度
	int ans[N];  //记录该点状态
	signed main() {
		mem(Head, -1);
		int n;
		cin >> n;
		string s;
		for (int i = 1; i <= n; i++) {
			cin >> s;
			string f = s.substr(0, 3);
			string e = s.substr(s.size() - 3);  // 取前三个和后三个字符
			int a = get(f), b = get(e); //取Hash值
			E[i] = b;
			add(b, a);  //反向建图
			d[a]++;
		}
		queue<int> q;
		mem(ans, -1);  //既不是必败也不是必胜态，初始化为平局
		for (int i = 0; i < 52 * 52 * 52; i++) {
			if (d[i] == 0) {  //出度为0的点 也就是没有能继续往下走的边，此时为必败态
				ans[i] = 0;   //记录该点为必败态
				q.push(i);
			}
		}
		while (!q.empty()) {  //反向BFS，判断该点能否走到必败态，类似拓扑排序
			int t = q.front();
			q.pop();
			for (int i = Head[t]; ~i; i = Next[i]) {
				int e = Edge[i];
				if (ans[e] == -1) {
					d[e]--;             //能走向的边的数量减1，此处是t->e  但是因为反向建图，实际上是e->t
					if (ans[t] == 0) {  //如果该点走向必败态，那么下一个人必输，这个点就是必胜态
						ans[e] = 1;     //记录状态
						q.push(e);
					} else if (d[e] == 0) {  //如果没有边可以走,那该点为必败态
						ans[e] = 0;
						q.push(e);
					} //其他情况为平局
				}
			}
		}
		for (int i = 1; i <= n; i++) {
			if (ans[E[i]] == -1)
				cout << "Draw" << endl;
			else if (ans[E[i]] == 1)
				cout << "Aoki" << endl;
			else
				cout << "Takahashi" << endl;
		}
		return 0;
	}

	/*
	*
	*　　┏┓　　　┏┓+ +
	*　┏┛┻━━━┛┻┓ + +
	*　┃　　　　　　　┃
	*　┃　　　━　　　┃ ++ + + +
	*  ████━████+
	*  ◥██◤　◥██◤ +
	*　┃　　　┻　　　┃
	*　┃　　　　　　　┃ + +
	*　┗━┓　　　┏━┛
	*　　　┃　　　┃ + + + +Code is far away from 　
	*　　　┃　　　┃ + bug with the animal protecting
	*　　　┃　 　 ┗━━━┓ 神兽保佑,代码无bug　
	*　　　┃ 　　　　　　 ┣┓
	*　　  ┃ 　　　　　 　┏┛
	*　    ┗┓┓┏━┳┓┏┛ + + + +
	*　　　　┃┫┫　┃┫┫
	*　　　　┗┻┛　┗┻┛+ + + +
	*/
```

, summary=1、走向必败态的为必胜态
2、走向必胜态或者无法继续时为必败态
3、其他情况为平局

字符串首尾连边做成一个有向图，因为下一步的选择与上一步的字符串结尾字符有关，所以我们这里建立反图，让让尾指向首做有向图
, coverImg=/static/img/cover/5.jpg, status=1, views=18, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), tags=[Tag(id=15, name=C/C++, createTime=2022-06-26T13:25:58, updateTime=2022-06-26T13:25:58, articleCount=3)]), Article(id=2, title=Spring Boot, content=##Spring Boot 框架
Spring框架是Java平台上的一种开源应用框架，提供具有控制反转特性的容器。尽管Spring框架自身对编程模型没有限制，但其在Java应用中的频繁使用让它备受青睐，以至于后来让它作为EJB（EnterpriseJavaBeans）模型的补充，甚至是替补。Spring框架为开发提供了一系列的解决方案，比如利用控制反转的核心特性，并通过依赖注入实现控制反转来实现管理对象生命周期容器化，利用面向切面编程进行声明式的事务管理，整合多种持久化技术管理数据访问，提供大量优秀的Web框架方便开发等等。Spring框架具有控制反转（IOC）特性，IOC旨在方便项目维护和测试，它提供了一种通过Java的反射机制对Java对象进行统一的配置和管理的方法。Spring框架利用容器管理对象的生命周期，容器可以通过扫描XML文件或类上特定Java注解来配置对象，开发者可以通过依赖查找或依赖注入来获得对象。Spring框架具有面向切面编程（AOP）框架，SpringAOP框架基于代理模式，同时运行时可配置；AOP框架主要针对模块之间的交叉关注点进行模块化。Spring框架的AOP框架仅提供基本的AOP特性，虽无法与AspectJ框架相比，但通过与AspectJ的集成，也可以满足基本需求。Spring框架下的事务管理、远程访问等功能均可以通过使用SpringAOP技术实现。Spring的事务管理框架为Java平台带来了一种抽象机制，使本地和全局事务以及嵌套事务能够与保存点一起工作，并且几乎可以在Java平台的任何环境中工作。Spring集成多种事务模板，系统可以通过事务模板、XML或Java注解进行事务配置，并且事务框架集成了消息传递和缓存等功能。Spring的数据访问框架解决了开发人员在应用程序中使用数据库时遇到的常见困难。它不仅对Java:JDBC、iBATS/MyBATIs、Hibernate、Java数据对象（JDO）、ApacheOJB和ApacheCayne等所有流行的数据访问框架中提供支持，同时还可以与Spring的事务管理一起使用，为数据访问提供了灵活的抽象。Spring框架最初是没有打算构建一个自己的WebMVC框架，其开发人员在开发过程中认为现有的StrutsWeb框架的呈现层和请求处理层之间以及请求处理层和模型之间的分离不够，于是创建了SpringMVC。, summary=Spring框架是Java平台上的一种开源应用框架，提供具有控制反转特性的容器。尽管Spring框架自身对编程模型没有限制，但其在Java应用中的频繁使用让它备受青睐，以至于后来让它作为EJB（EnterpriseJavaBeans）模型的补充，甚至是替补。Spring框架为开发提供了一系列的解决方案，比如利用控制反转的核心特性，并通过依赖注入实现控制反转来实现管, coverImg=https://pic.imgdb.cn/item/6279b94e0947543129f458e3.jpg, status=1, views=3, createTime=2022-06-26, updateTime=2022-06-26, category=Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), tags=[Tag(id=16, name=MySQL, createTime=2022-06-26T13:28:59, updateTime=2022-06-26T13:28:59, articleCount=3), Tag(id=12, name=Springboot, createTime=2022-06-26T13:25:37, updateTime=2022-06-26T13:25:37, articleCount=2), Tag(id=10, name=Java, createTime=2022-06-26T13:25:26, updateTime=2022-06-26T13:25:26, articleCount=3)]), Article(id=1, title=Markdown语言, content=## 主要内容
> #### Markdown*是什么*？
> #### *谁*创造了它？
> #### *为什么*要使用它？
> #### *怎么*使用？
> #### *谁*在用？
> #### 尝试一下
## 正文
### 1. Markdown*是什么*？
**Markdown**是一种轻量级**标记语言**，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。    
**Markdown**也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    

### 2. *谁*创造了它？
它由[**Aaron Swartz**](http://www.aaronsw.com/)和**John Gruber**共同设计，**Aaron Swartz**就是那位于去年（*2013年1月11日*）自杀,有着**开挂**一般人生经历的程序员。维基百科对他的[介绍](http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8)是：**软件工程师、作家、政治组织者、互联网活动家、维基百科人**。    

他有着足以让你跪拜的人生经历：    
+ **14岁**参与RSS 1.0规格标准的制订。     
+ **2004**年入读**斯坦福**，之后退学。   
+ **2005**年创建[Infogami](http://infogami.org/)，之后与[Reddit](http://www.reddit.com/)合并成为其合伙人。   
+ **2010**年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   
+ **2011**年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     
+ **2013**年1月自杀身亡。    

![Aaron Swartz](https://pic.imgdb.cn/item/62b7ebcd2f25919088bf1b21.jpg)

天才都有早逝的归途。

### 3. *为什么*要使用它？
+ 它是易读（看起来舒服）、易写（语法简单）、易更改**纯文本**。处处体现着**极简主义**的影子。
+ 兼容HTML，可以转换为HTML格式发布。
+ 跨平台使用。
+ 越来越多的网站支持Markdown。
+ 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）
+ 摆脱Word（我不是认真的）。

### 4. *怎么*使用？
如果不算**扩展**，Markdown的语法绝对**简单**到让你爱不释手。

Markdown语法主要分为如下几大部分：
**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\`**，**符号'`'**。

#### 4.1 标题
两种形式：  
1）使用`=`和`-`标记一级和二级标题。
> 一级标题   
> `=========`   
> 二级标题    
> `---------`
效果：
> 一级标题   
> =========   
> 二级标题
> ---------  
2）使用`#`，可表示1-6级标题。
> \# 一级标题   
> \## 二级标题   
> \### 三级标题   
> \#### 四级标题   
> \##### 五级标题   
> \###### 六级标题    
效果：
> # 一级标题   
> ## 二级标题   
> ### 三级标题   
> #### 四级标题   
> ##### 五级标题   
> ###### 六级标题
#### 4.2 段落
段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。

#### 4.3 区块引用
在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：
> \> 区块引用  
> \>> 嵌套引用  
效果：
> 区块引用  
>> 嵌套引用
#### 4.4 代码区块
代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    

普通段落：
void main()    
{    
    printf("Hello, Markdown.");    
}    

代码区块：

    void main()
    {
        printf("Hello, Markdown.");
    }

**注意**:需要和普通段落之间存在空行。

#### 4.5 强调
在强调内容两侧分别加上`*`或者`_`，如：
> \*斜体\*，\_斜体\_    
> \*\*粗体\*\*，\_\_粗体\_\_
效果：
> *斜体*，_斜体_    
> **粗体**，__粗体__
#### 4.6 列表
使用`·`、`+`、或`-`标记无序列表，如：
> \-（+\*） 第一项
> \-（+\*） 第二项
> \- （+\*）第三项
**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。

效果：
> + 第一项
> + 第二项
> + 第三项
有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：
> 1 . 第一项   
> 2 . 第二项    
> 3 . 第三项    
效果：
> 1. 第一项
> 2. 第二项
> 3. 第三项
#### 4.7 分割线
分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。

#### 4.8 链接
链接可以由两种形式生成：**行内式**和**参考式**。    
**行内式**：
> \[younghz的Markdown库\]\(https:://github.com/younghz/Markdown "Markdown"\)。
效果：
> [younghz的Markdown库](https:://github.com/younghz/Markdown "Markdown")。
**参考式**：
> \[younghz的Markdown库1\]\[1\]    
> \[younghz的Markdown库2\]\[2\]    
> \[1\]:https:://github.com/younghz/Markdown "Markdown"    
> \[2\]:https:://github.com/younghz/Markdown "Markdown"    
效果：
> [younghz的Markdown库1][1]    
> [younghz的Markdown库2][2]
[1]: https:://github.com/younghz/Markdown "Markdown"
[2]: https:://github.com/younghz/Markdown "Markdown"

**注意**：上述的`[1]:https:://github.com/younghz/Markdown "Markdown"`不出现在区块中。

#### 4.9 图片
添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。
#### 4.10 反斜杠`\`
相当于**反转义**作用。使符号成为普通符号。
#### 4.11 符号'`'
起到标记作用。如：
>\`ctrl+a\`

效果：
>`ctrl+a`    
#### 5. *谁*在用？
Markdown的使用者：
+ GitHub
+ 简书
+ Stack Overflow
+ Apollo
+ Moodle
+ Reddit
+ 等等

#### 6. 尝试一下
+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。
+ **在线**的dillinger.io评价也不错   
+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    
+ **Mac**下的Mou是国人贡献的，口碑很好。
+ **Linux**下的ReText不错。    

**当然，最终境界永远都是笔下是语法，心中格式化 :)。**

****
**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。
虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]
(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。
****
以上基本是所有traditonal markdown的语法。

### 其它：
列表的使用(非traditonal markdown)：

用`|`表示表格纵向边界，表头和表内容用`-`隔开，并可用`:`进行对齐设置，两边都有`:`则表示居中，若不加`:`则默认左对齐。

|代码库                              |链接                                |
|:------------------------------------:|------------------------------------|
|MarkDown                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|
|MarkDownCopy                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown "Markdown")|, summary=Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。, coverImg=https://pic.imgdb.cn/item/62b7eade2f25919088be05f8.jpg, status=1, views=26, createTime=2022-06-26, updateTime=2022-06-29, category=Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1), tags=[Tag(id=2, name=Markdown, createTime=2022-06-26T13:09:31, updateTime=2022-06-26T13:09:31, articleCount=1)])], prePage=0, nextPage=0, isFirstPage=true, isLastPage=true, hasPreviousPage=false, hasNextPage=false, navigatePages=8, navigateFirstPage=1, navigateLastPage=1, navigatepageNums=[1]}}}
2022-07-01 16:00:20.615 [http-nio-8080-exec-4] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/category', method='wiki.jixing.myblog.controller.PageController.category', args=[], result=category}
2022-07-01 16:00:20.748 [http-nio-8080-exec-6] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=0, message='获取失败', data=null}}
2022-07-01 16:00:20.754 [http-nio-8080-exec-3] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=1, message='查询成功', data=[Category(id=20, name=爬虫, createTime=2022-06-26T21:15:37, updateTime=2022-06-30T08:29:16, articleCount=1), Category(id=17, name=大数据, createTime=2022-06-26T13:28:41, updateTime=2022-06-30T08:28:57, articleCount=1), Category(id=16, name=算法, createTime=2022-06-26T13:28:35, updateTime=2022-06-26T13:28:35, articleCount=1), Category(id=15, name=Web, createTime=2022-06-26T13:28:30, updateTime=2022-06-26T13:28:30, articleCount=1), Category(id=14, name=前端, createTime=2022-06-26T13:28:26, updateTime=2022-06-26T13:28:26, articleCount=2), Category(id=13, name=后端, createTime=2022-06-26T13:28:21, updateTime=2022-06-26T13:28:21, articleCount=2), Category(id=12, name=语言, createTime=2022-06-26T13:27:01, updateTime=2022-06-26T13:27:19, articleCount=1)]}}
2022-07-01 16:00:20.759 [http-nio-8080-exec-2] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=1, message='success', data=[{name=爬虫, value=1}, {name=大数据, value=1}, {name=算法, value=1}, {name=Web, value=1}, {name=前端, value=2}, {name=后端, value=2}, {name=语言, value=1}]}}
2022-07-01 16:00:21.286 [http-nio-8080-exec-8] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/about', method='wiki.jixing.myblog.controller.PageController.about', args=[], result=about}
2022-07-01 16:00:21.411 [http-nio-8080-exec-9] [INFO ] wiki.jixing.myblog.aspect.LogAspect -- {ip='0:0:0:0:0:0:0:1', url='http://localhost:8080/user/current', method='wiki.jixing.myblog.controller.UserController.getCurrentUser', args=[org.apache.catalina.session.StandardSessionFacade@16c311e5], result=Result{code=0, message='获取失败', data=null}}
2022-07-01 16:00:28.237 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closing ...
2022-07-01 16:00:28.241 [SpringApplicationShutdownHook] [INFO ] com.alibaba.druid.pool.DruidDataSource -- {dataSource-1} closed
